'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var styled = require('styled-components');
var lib = require('@govuk-react/lib');
var constants = require('@govuk-react/constants');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var styled__default = /*#__PURE__*/_interopDefault(styled);

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

var _excluded = ["children", "isPageHeading"];
var StyledLegend = styled__default["default"]('legend').withConfig({
  displayName: "legend__StyledLegend",
  componentId: "sc-12rap65-0"
})(lib.spacing.withWhiteSpace(), lib.typography.font({
  size: 19
}), lib.typography.textColour, {
  boxSizing: 'border-box',
  display: 'table',
  maxWidth: '100%',
  marginBottom: constants.SPACING_POINTS[2],
  padding: 0,
  // Disabling this as per https://github.com/alphagov/govuk-frontend/issues/1239
  // overflow: 'hidden',
  whiteSpace: 'normal'
}, function (_ref) {
  var size = _ref.size;
  var actualSize = Number.isNaN(Number(size)) ? constants.HEADING_SIZES[size] : size;

  if (size !== undefined && !actualSize) {
    throw Error("Unknown size ".concat(size, " used for legend."));
  }

  if (!actualSize) {
    return undefined;
  }

  return _objectSpread2(_objectSpread2({}, lib.typography.font({
    size: actualSize,
    weight: 'bold'
  })), actualSize > 19 ? {
    marginBottom: constants.SPACING_POINTS[3]
  } : undefined);
});
var StyledHeading = styled__default["default"]('h1').withConfig({
  displayName: "legend__StyledHeading",
  componentId: "sc-12rap65-1"
})({
  margin: 0,
  fontSize: 'inherit',
  fontWeight: 'inherit'
}); // // When the legend contains an H1, we want the H1 to inherit all styles from
// // the legend. Effectively we want to be able to treat the heading as if it is
// // not there.
// .govuk-fieldset__heading {
//   margin: 0;
//   font-size: inherit;
//   font-weight: inherit;
// }

var Legend = function Legend(_ref2) {
  var children = _ref2.children,
      _ref2$isPageHeading = _ref2.isPageHeading,
      isPageHeading = _ref2$isPageHeading === void 0 ? undefined : _ref2$isPageHeading,
      props = _objectWithoutProperties(_ref2, _excluded);

  return /*#__PURE__*/React__namespace.createElement(StyledLegend, props, isPageHeading ? /*#__PURE__*/React__namespace.createElement(StyledHeading, null, children) : children);
};

Legend.defaultProps = {
  isPageHeading: false,
  size: undefined
};
Legend.displayName = 'Fieldset.Legend';

/**
 * ### References
 *
 * - https://design-system.service.gov.uk/components/fieldset/
 * - https://github.com/alphagov/govuk-frontend/tree/main/src/govuk/components/fieldset
 * - https://design-system.service.gov.uk/get-started/labels-legends-headings/
 */
var StyledFieldset = styled__default["default"]('fieldset').withConfig({
  displayName: "src__StyledFieldset",
  componentId: "sc-1j46mnv-0"
})({
  border: 0,
  '&:after': {
    content: '""',
    display: 'block',
    clear: 'both'
  }
}, lib.spacing.withWhiteSpace({
  margin: 0,
  padding: 0
}));
/**
 * Use the fieldset component when you need to show a relationship between multiple
 * form inputs. For example, you may need to group a set of text inputs into a single
 * fieldset when [asking for an address](https://design-system.service.gov.uk/patterns/addresses).
 *
 * - https://govuk-react.github.io/govuk-react/?path=/docs/fieldset
 * - https://design-system.service.gov.uk/components/fieldset/
 */

var Fieldset = function Fieldset(props) {
  return /*#__PURE__*/React__namespace.createElement(StyledFieldset, props);
};
Fieldset.Legend = Legend;
Fieldset.displayName = 'Fieldset';

exports.Fieldset = Fieldset;
exports["default"] = Fieldset;
