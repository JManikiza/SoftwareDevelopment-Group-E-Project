'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var constants = require('@govuk-react/constants');
var govukColours = require('govuk-colours');

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

// This lib is effectively a port of govuk-frontend's visually-hidden sass helpers
// Tracking:
// https://github.com/alphagov/govuk-frontend/blob/main/src/govuk/helpers/_visually-hidden.scss
function visuallyHidden() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$important = _ref.important,
      isImportant = _ref$important === void 0 ? true : _ref$important,
      _ref$focusable = _ref.focusable,
      isFocusable = _ref$focusable === void 0 ? false : _ref$focusable;

  var important = isImportant ? ' !important' : '';
  return _objectSpread2({
    position: "absolute".concat(important),
    width: "1px".concat(important),
    height: "1px".concat(important),
    margin: "0".concat(important),
    overflow: "hidden".concat(important),
    clip: "rect(0 0 0 0)".concat(important),
    clipPath: "inset(50%)".concat(important),
    border: "0".concat(important),
    whiteSpace: "nowrap".concat(important)
  }, isFocusable ? {
    '&:active,&:focus': {
      position: "static".concat(important),
      width: "auto".concat(important),
      height: "auto".concat(important),
      margin: "inherit".concat(important),
      overflow: "visible".concat(important),
      clip: "auto".concat(important),
      clipPath: "none".concat(important),
      whiteSpace: "inherit".concat(important)
    }
  } : {
    padding: "0".concat(important)
  });
}

function focusable() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$important = _ref2.important,
      important = _ref2$important === void 0 ? true : _ref2$important;

  return visuallyHidden({
    important: important,
    focusable: true
  });
}

visuallyHidden.focusable = focusable;

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function simple(size) {
  var scale = constants.SPACING_POINTS[Math.abs(size)];
  var polarity = size < 0 ? -1 : 1;

  if (scale === undefined) {
    throw Error("Unknown spacing size ".concat(size, " - expected a point from the spacing scale."));
  }

  return scale * polarity;
}

function styleForDirection(size, property) {
  var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  // NB styled-components automatically sets style to include `px` if needed
  return _defineProperty({}, direction && direction !== 'all' ? "".concat(property, "-").concat(direction) : property, size);
}

function responsive$1(_ref2) {
  var size = _ref2.size,
      property = _ref2.property,
      _ref2$direction = _ref2.direction,
      direction = _ref2$direction === void 0 ? null : _ref2$direction,
      _ref2$adjustment = _ref2.adjustment,
      adjustment = _ref2$adjustment === void 0 ? 0 : _ref2$adjustment;
  var scale = constants.SPACING_MAP[Math.abs(Number(size))];
  var polarity = size < 0 ? -1 : 1;

  if (scale === undefined) {
    throw Error("Unknown responsive spacing size ".concat(size, " - expected a point from the responsive spacing scale."));
  }

  if (!property) {
    throw Error('No property passed to responsiveSpacing');
  }

  if (Array.isArray(direction)) {
    return Object.assign.apply(Object, [{}].concat(_toConsumableArray(direction.map(function (dir) {
      return styleForDirection(scale.mobile * polarity + adjustment, property, dir);
    })), [_defineProperty({}, constants.MEDIA_QUERIES.TABLET, Object.assign.apply(Object, [{}].concat(_toConsumableArray(direction.map(function (dir) {
      return styleForDirection(scale.tablet * polarity + adjustment, property, dir);
    })))))]));
  }

  var f = _objectSpread2(_objectSpread2({}, styleForDirection(scale.mobile * polarity + adjustment, property, direction)), {}, _defineProperty({}, constants.MEDIA_QUERIES.TABLET, styleForDirection(scale.tablet * polarity + adjustment, property, direction)));

  return f;
}
function responsiveMargin(value) {
  if (Number.isInteger(value)) {
    return responsive$1({
      size: Number(value),
      property: 'margin'
    });
  }

  if (_typeof(value) !== 'object') {
    throw Error('Expected padding value to be an object or integer');
  }

  var size = value.size,
      direction = value.direction,
      adjustment = value.adjustment;
  return responsive$1({
    size: size,
    property: 'margin',
    direction: direction,
    adjustment: adjustment
  });
}
function responsivePadding(value) {
  if (Number.isInteger(value)) {
    return responsive$1({
      size: Number(value),
      property: 'padding'
    });
  }

  if (_typeof(value) !== 'object') {
    throw Error('Expected padding value to be an object or integer');
  }

  var size = value.size,
      direction = value.direction,
      adjustment = value.adjustment;
  return responsive$1({
    size: size,
    property: 'padding',
    direction: direction,
    adjustment: adjustment
  });
} // withWhiteSpace lib styling function
// does not form part of govuk-frontend
// `withWhiteSpace(config)`
// generates a styling function, based on config, which can be used when styling a component
// `margin` and `padding` are supported as props and config values
// can be a single number, to indicate scale size to use in all directions
// can be an object in format `{ size, direction, adjustment }`
// - see `responsivePadding` and `responsiveMargin` calls
// can be an array of numbers/objects

function withWhiteSpace() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function () {
    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref4$margin = _ref4.margin,
        margin = _ref4$margin === void 0 ? config.margin : _ref4$margin,
        _ref4$padding = _ref4.padding,
        padding = _ref4$padding === void 0 ? config.padding : _ref4$padding,
        _ref4$mb = _ref4.mb,
        marginBottom = _ref4$mb === void 0 ? config.marginBottom : _ref4$mb;

    var styles = [];

    if (margin !== undefined) {
      if (Array.isArray(margin)) {
        styles.push.apply(styles, _toConsumableArray(margin.map(function (val) {
          return responsiveMargin(val);
        })));
      } else {
        styles.push(responsiveMargin(margin));
      }
    }

    if (padding !== undefined) {
      if (Array.isArray(padding)) {
        styles.push.apply(styles, _toConsumableArray(padding.map(function (val) {
          return responsivePadding(val);
        })));
      } else {
        styles.push(responsivePadding(padding));
      }
    }

    if (marginBottom !== undefined) {
      styles.push(responsiveMargin({
        size: marginBottom,
        direction: 'bottom'
      }));
    }

    return styles;
  };
}
function withWidth() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function () {
    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref5$setWidth = _ref5.setWidth,
        setWidth = _ref5$setWidth === void 0 ? config.width : _ref5$setWidth;

    if (setWidth) {
      var width = constants.WIDTHS[setWidth] || setWidth;
      var _config$mediaQuery = config.mediaQuery,
          mediaQuery = _config$mediaQuery === void 0 ? constants.MEDIA_QUERIES.TABLET : _config$mediaQuery,
          noDefault = config.noDefault;
      return _defineProperty({
        width: noDefault ? undefined : '100%'
      }, mediaQuery, {
        width: width
      });
    }

    return undefined;
  };
}

var index$3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  simple: simple,
  responsive: responsive$1,
  responsiveMargin: responsiveMargin,
  responsivePadding: responsivePadding,
  withWhiteSpace: withWhiteSpace,
  withWidth: withWidth
});

var textColour = _defineProperty({
  color: govukColours.BLACK
}, constants.MEDIA_QUERIES.PRINT, {
  color: '#000'
});
var textColor = textColour;
function common$1() {
  var fontFamily = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : constants.FONT_STACK;
  return _defineProperty({
    fontFamily: fontFamily,
    WebkitFontSmoothing: 'antialiased',
    MozOsxFontSmoothing: 'grayscale'
  }, constants.MEDIA_QUERY_PRINT, {
    fontFamily: constants.FONT_STACK_PRINT
  });
}

function getSizeStyle(scale) {
  var lineHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scale.lineHeight;
  return {
    fontSize: "".concat(scale.fontSize, "px"),
    lineHeight: lineHeight
  };
}

function responsive(size, overrideLineHeight) {
  var _objectSpread2$1;

  var scale = constants.TYPOGRAPHY_SCALE[size];

  if (!scale) {
    throw Error("Unknown font size ".concat(size, " - expected a point from the typography scale."));
  }

  return _objectSpread2(_objectSpread2({}, getSizeStyle(scale.mobile, overrideLineHeight)), {}, (_objectSpread2$1 = {}, _defineProperty(_objectSpread2$1, constants.MEDIA_QUERIES.TABLET, getSizeStyle(scale.tablet, overrideLineHeight)), _defineProperty(_objectSpread2$1, constants.MEDIA_QUERIES.PRINT, getSizeStyle(scale.print, overrideLineHeight)), _objectSpread2$1));
}
function font() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      size = _ref2.size,
      _ref2$weight = _ref2.weight,
      weight = _ref2$weight === void 0 ? 'regular' : _ref2$weight,
      _ref2$tabular = _ref2.tabular,
      tabular = _ref2$tabular === void 0 ? false : _ref2$tabular,
      lineHeight = _ref2.lineHeight;

  return _objectSpread2(_objectSpread2(_objectSpread2({}, common$1(tabular ? constants.FONT_STACK_TABULAR : undefined)), constants.FONT_WEIGHTS[weight] ? {
    fontWeight: constants.FONT_WEIGHTS[weight]
  } : undefined), size ? responsive(size, lineHeight) : undefined);
}

var index$2 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  textColour: textColour,
  textColor: textColor,
  common: common$1,
  responsive: responsive,
  font: font
});

var FOCUS_TEXT_COLOUR = govukColours.BLACK;
function common(fontFamily) {
  return [common$1(fontFamily), constants.FOCUSABLE_FILL];
}
var styleDefault = {
  ':link': {
    color: govukColours.LINK_COLOUR
  },
  ':visited': {
    color: govukColours.LINK_VISITED_COLOUR
  },
  ':hover': {
    color: govukColours.LINK_HOVER_COLOUR
  },
  ':active': {
    color: govukColours.LINK_ACTIVE_COLOUR
  },
  ':focus': {
    color: FOCUS_TEXT_COLOUR
  }
};
var styleMuted = {
  '&:link, &:visited, &:hover, &:active': {
    color: govukColours.SECONDARY_TEXT_COLOUR
  },
  '&:focus': {
    color: FOCUS_TEXT_COLOUR
  }
};
var styleText = {
  '&:link, &:visited, &:hover, &:active, &:focus': textColour
};
var styleNoVisitedState = {
  ':link': {
    color: govukColours.LINK_COLOUR
  },
  ':visited': {
    color: govukColours.LINK_COLOUR
  },
  ':hover': {
    color: govukColours.LINK_HOVER_COLOUR
  },
  ':active': {
    color: govukColours.LINK_ACTIVE_COLOUR
  },
  ':focus': {
    color: FOCUS_TEXT_COLOUR
  }
};
var printFriendly = _defineProperty({}, constants.MEDIA_QUERY_PRINT, {
  '&[href^="/"], &[href^="http://"], &[href^="https://"]': {
    '&::after': {
      content: '" (" attr(href) ")"',
      fontSize: '90%',
      wordWrap: 'break-word'
    }
  }
});

var index$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  common: common,
  styleDefault: styleDefault,
  styleMuted: styleMuted,
  styleText: styleText,
  styleNoVisitedState: styleNoVisitedState,
  printFriendly: printFriendly
});

// Tracking:
// https://github.com/alphagov/govuk-frontend/blob/main/src/govuk/helpers/_shape-arrow.scss
var root3 = 1.732; // Math.sqrt(3);

function equilateralHeight(base) {
  return base / 2 * root3;
}

function makeShape(direction, base, height) {
  var perpendicular = base / 2;

  switch (direction) {
    case 'up':
      return {
        clipPath: 'polygon(50% 0%, 0% 100%, 100% 100%)',
        borderWidth: "0 ".concat(perpendicular, "px ").concat(height, "px ").concat(perpendicular, "px"),
        borderBottomColor: 'inherit'
      };

    case 'right':
      return {
        clipPath: 'polygon(0% 0%, 100% 50%, 0% 100%)',
        borderWidth: "".concat(perpendicular, "px 0 ").concat(perpendicular, "px ").concat(height, "px"),
        borderLeftColor: 'inherit'
      };

    case 'down':
      return {
        clipPath: 'polygon(0% 0%, 50% 100%, 100% 0%)',
        borderWidth: "".concat(height, "px ").concat(perpendicular, "px 0 ").concat(perpendicular, "px"),
        borderTopColor: 'inherit'
      };

    case 'left':
      return {
        clipPath: 'polygon(0% 50%, 100% 100%, 100% 0%)',
        borderWidth: "".concat(perpendicular, "px ").concat(height, "px ").concat(perpendicular, "px 0"),
        borderRightColor: 'inherit'
      };

    default:
      throw Error("Invalid arrow direction: expected 'up', 'right', 'down' or 'left', got ".concat(direction));
  }
} // eslint-disable-next-line import/prefer-default-export


function arrow(_ref) {
  var direction = _ref.direction,
      _ref$base = _ref.base,
      base = _ref$base === void 0 ? 0 : _ref$base,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? equilateralHeight(base) : _ref$height,
      _ref$display = _ref.display,
      display = _ref$display === void 0 ? 'block' : _ref$display;
  return _objectSpread2({
    display: display,
    width: 0,
    height: 0,
    borderStyle: 'solid',
    borderColor: 'transparent'
  }, makeShape(direction, base, height));
}

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  arrow: arrow
});

exports.link = index$1;
exports.shape = index;
exports.spacing = index$3;
exports.typography = index$2;
exports.visuallyHidden = visuallyHidden;
