import styled from 'styled-components';
import { link } from '@govuk-react/lib';

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

/**
 * Link/Anchor element.
 *
 * - https://govuk-react.github.io/govuk-react/?path=/docs/link
 * - https://design-system.service.gov.uk/styles/typography/#links
 */
var Link = styled('a').withConfig({
  shouldForwardProp: function shouldForwardProp(prop) {
    return !['noVisitedState', 'textColour', 'muted'].includes(prop);
  },
  displayName: "src__Link",
  componentId: "sc-1loawqx-0"
}).apply(void 0, _toConsumableArray(link.common()).concat([link.styleDefault, link.printFriendly, function (_ref) {
  var muted = _ref.muted;
  return muted ? link.styleMuted : undefined;
}, function (_ref2) {
  var textColour = _ref2.textColour;
  return textColour ? link.styleText : undefined;
}, function (_ref3) {
  var noVisitedState = _ref3.noVisitedState;
  return noVisitedState ? link.styleNoVisitedState : undefined;
}]));
Link.defaultProps = {
  muted: false,
  textColour: false,
  noVisitedState: false
};
Link.displayName = 'Link';

export { Link, Link as default };
