"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Modifies a component that contains multiple inputs to behave as though it was a single input by:
// - merging values in to an object
// - not calling onBlur when going from field to field within the same component
// - not calling onFocus when going frmo field to field within the same component
var _default = function _default(ComposedComponent) {
  var MultiInputInput =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(MultiInputInput, _Component);

    function MultiInputInput() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _Component.call.apply(_Component, [this].concat(args)) || this;

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "mergeValueFromEvent", function (e, key) {
        var _extends2;

        return _extends({}, _this.props.value, (_extends2 = {}, _extends2[key] = e.target.value, _extends2));
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleChange", function (e, key) {
        _this.props.onChange(_this.mergeValueFromEvent(e, key));
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleBlur", function (e, key) {
        if (!Object.values(_this.inputs).some(function (input) {
          return e.relatedTarget === input;
        })) {
          _this.props.onBlur(_this.mergeValueFromEvent(e, key));
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleFocus", function (e, key) {
        if (!Object.values(_this.inputs).some(function (input) {
          return e.relatedTarget === input;
        })) {
          _this.props.onFocus(_this.mergeValueFromEvent(e, key));
        }
      });

      return _this;
    }

    var _proto = MultiInputInput.prototype;

    _proto.render = function render() {
      var _this2 = this;

      return _react.default.createElement(ComposedComponent, _extends({
        refs: function refs(inputs) {
          _this2.inputs = inputs;
        }
      }, this.props, this.state, {
        onChange: this.handleChange,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus
      }));
    };

    return MultiInputInput;
  }(_react.Component);

  MultiInputInput.propTypes = {
    value: _propTypes.default.object,
    onChange: _propTypes.default.func,
    onBlur: _propTypes.default.func,
    onFocus: _propTypes.default.func
  };
  MultiInputInput.defaultProps = {
    value: {},
    onChange: function onChange() {
      return null;
    },
    onBlur: function onBlur() {
      return null;
    },
    onFocus: function onFocus() {
      return null;
    }
  };
  return MultiInputInput;
};

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=index.js.map