{"ast":null,"code":"'use strict';\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js');\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js');\nvar prefixSize = require('../util/prefix-size.js');\nvar factorySpace = require('./factory-space.js');\nvar codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  var self = this;\n  var closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  };\n  var initialPrefix = prefixSize(this.events, 'linePrefix');\n  var sizeOpen = 0;\n  var marker;\n  return start;\n  function start(code) {\n    effects.enter('codeFenced');\n    effects.enter('codeFencedFence');\n    effects.enter('codeFencedFenceSequence');\n    marker = code;\n    return sequenceOpen(code);\n  }\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit('codeFencedFenceSequence');\n    return sizeOpen < 3 ? nok(code) : factorySpace(effects, infoOpen, 'whitespace')(code);\n  }\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code);\n    }\n    effects.enter('codeFencedFenceInfo');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return info(code);\n  }\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceInfo');\n      return factorySpace(effects, infoAfter, 'whitespace')(code);\n    }\n    if (code === 96 && code === marker) return nok(code);\n    effects.consume(code);\n    return info;\n  }\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code);\n    }\n    effects.enter('codeFencedFenceMeta');\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return meta(code);\n  }\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      effects.exit('codeFencedFenceMeta');\n      return openAfter(code);\n    }\n    if (code === 96 && code === marker) return nok(code);\n    effects.consume(code);\n    return meta;\n  }\n  function openAfter(code) {\n    effects.exit('codeFencedFence');\n    return self.interrupt ? ok(code) : content(code);\n  }\n  function content(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return effects.attempt(closingFenceConstruct, after, initialPrefix ? factorySpace(effects, content, 'linePrefix', initialPrefix + 1) : content);\n    }\n    effects.enter('codeFlowValue');\n    return contentContinue(code);\n  }\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue');\n      return content(code);\n    }\n    effects.consume(code);\n    return contentContinue;\n  }\n  function after(code) {\n    effects.exit('codeFenced');\n    return ok(code);\n  }\n  function tokenizeClosingFence(effects, ok, nok) {\n    var size = 0;\n    return factorySpace(effects, closingSequenceStart, 'linePrefix', this.parser.constructs.disable.null.indexOf('codeIndented') > -1 ? undefined : 4);\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence');\n      effects.enter('codeFencedFenceSequence');\n      return closingSequence(code);\n    }\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code);\n        size++;\n        return closingSequence;\n      }\n      if (size < sizeOpen) return nok(code);\n      effects.exit('codeFencedFenceSequence');\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code);\n    }\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence');\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\nmodule.exports = codeFenced;","map":{"version":3,"names":["markdownLineEnding","require","markdownLineEndingOrSpace","prefixSize","factorySpace","codeFenced","name","tokenize","tokenizeCodeFenced","concrete","effects","ok","nok","self","closingFenceConstruct","tokenizeClosingFence","partial","initialPrefix","events","sizeOpen","marker","start","code","enter","sequenceOpen","consume","exit","infoOpen","openAfter","contentType","info","infoAfter","meta","interrupt","content","after","attempt","contentContinue","size","closingSequenceStart","parser","constructs","disable","null","indexOf","undefined","closingSequence","closingSequenceEnd","module","exports"],"sources":["C:/Users/JMani/Documents/GitHub/SoftwareDevelopment-Group-E-Project/react-app/node_modules/micromark/dist/tokenize/code-fenced.js"],"sourcesContent":["'use strict'\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar markdownLineEndingOrSpace = require('../character/markdown-line-ending-or-space.js')\nvar prefixSize = require('../util/prefix-size.js')\nvar factorySpace = require('./factory-space.js')\n\nvar codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  var self = this\n  var closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  var initialPrefix = prefixSize(this.events, 'linePrefix')\n  var sizeOpen = 0\n  var marker\n  return start\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : content(code)\n  }\n\n  function content(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return effects.attempt(\n        closingFenceConstruct,\n        after,\n        initialPrefix\n          ? factorySpace(effects, content, 'linePrefix', initialPrefix + 1)\n          : content\n      )\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return content(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    var size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.indexOf('codeIndented') > -1\n        ? undefined\n        : 4\n    )\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n\nmodule.exports = codeFenced\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,sCAAsC,CAAC;AACxE,IAAIC,yBAAyB,GAAGD,OAAO,CAAC,+CAA+C,CAAC;AACxF,IAAIE,UAAU,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAClD,IAAIG,YAAY,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AAEhD,IAAII,UAAU,GAAG;EACfC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAEC,kBAAkB;EAC5BC,QAAQ,EAAE;AACZ,CAAC;AAED,SAASD,kBAAkBA,CAACE,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EAC5C,IAAIC,IAAI,GAAG,IAAI;EACf,IAAIC,qBAAqB,GAAG;IAC1BP,QAAQ,EAAEQ,oBAAoB;IAC9BC,OAAO,EAAE;EACX,CAAC;EACD,IAAIC,aAAa,GAAGd,UAAU,CAAC,IAAI,CAACe,MAAM,EAAE,YAAY,CAAC;EACzD,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAIC,MAAM;EACV,OAAOC,KAAK;EAEZ,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnBZ,OAAO,CAACa,KAAK,CAAC,YAAY,CAAC;IAC3Bb,OAAO,CAACa,KAAK,CAAC,iBAAiB,CAAC;IAChCb,OAAO,CAACa,KAAK,CAAC,yBAAyB,CAAC;IACxCH,MAAM,GAAGE,IAAI;IACb,OAAOE,YAAY,CAACF,IAAI,CAAC;EAC3B;EAEA,SAASE,YAAYA,CAACF,IAAI,EAAE;IAC1B,IAAIA,IAAI,KAAKF,MAAM,EAAE;MACnBV,OAAO,CAACe,OAAO,CAACH,IAAI,CAAC;MACrBH,QAAQ,EAAE;MACV,OAAOK,YAAY;IACrB;IAEAd,OAAO,CAACgB,IAAI,CAAC,yBAAyB,CAAC;IACvC,OAAOP,QAAQ,GAAG,CAAC,GACfP,GAAG,CAACU,IAAI,CAAC,GACTlB,YAAY,CAACM,OAAO,EAAEiB,QAAQ,EAAE,YAAY,CAAC,CAACL,IAAI,CAAC;EACzD;EAEA,SAASK,QAAQA,CAACL,IAAI,EAAE;IACtB,IAAIA,IAAI,KAAK,IAAI,IAAItB,kBAAkB,CAACsB,IAAI,CAAC,EAAE;MAC7C,OAAOM,SAAS,CAACN,IAAI,CAAC;IACxB;IAEAZ,OAAO,CAACa,KAAK,CAAC,qBAAqB,CAAC;IACpCb,OAAO,CAACa,KAAK,CAAC,aAAa,EAAE;MAC3BM,WAAW,EAAE;IACf,CAAC,CAAC;IACF,OAAOC,IAAI,CAACR,IAAI,CAAC;EACnB;EAEA,SAASQ,IAAIA,CAACR,IAAI,EAAE;IAClB,IAAIA,IAAI,KAAK,IAAI,IAAIpB,yBAAyB,CAACoB,IAAI,CAAC,EAAE;MACpDZ,OAAO,CAACgB,IAAI,CAAC,aAAa,CAAC;MAC3BhB,OAAO,CAACgB,IAAI,CAAC,qBAAqB,CAAC;MACnC,OAAOtB,YAAY,CAACM,OAAO,EAAEqB,SAAS,EAAE,YAAY,CAAC,CAACT,IAAI,CAAC;IAC7D;IAEA,IAAIA,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAKF,MAAM,EAAE,OAAOR,GAAG,CAACU,IAAI,CAAC;IACpDZ,OAAO,CAACe,OAAO,CAACH,IAAI,CAAC;IACrB,OAAOQ,IAAI;EACb;EAEA,SAASC,SAASA,CAACT,IAAI,EAAE;IACvB,IAAIA,IAAI,KAAK,IAAI,IAAItB,kBAAkB,CAACsB,IAAI,CAAC,EAAE;MAC7C,OAAOM,SAAS,CAACN,IAAI,CAAC;IACxB;IAEAZ,OAAO,CAACa,KAAK,CAAC,qBAAqB,CAAC;IACpCb,OAAO,CAACa,KAAK,CAAC,aAAa,EAAE;MAC3BM,WAAW,EAAE;IACf,CAAC,CAAC;IACF,OAAOG,IAAI,CAACV,IAAI,CAAC;EACnB;EAEA,SAASU,IAAIA,CAACV,IAAI,EAAE;IAClB,IAAIA,IAAI,KAAK,IAAI,IAAItB,kBAAkB,CAACsB,IAAI,CAAC,EAAE;MAC7CZ,OAAO,CAACgB,IAAI,CAAC,aAAa,CAAC;MAC3BhB,OAAO,CAACgB,IAAI,CAAC,qBAAqB,CAAC;MACnC,OAAOE,SAAS,CAACN,IAAI,CAAC;IACxB;IAEA,IAAIA,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAKF,MAAM,EAAE,OAAOR,GAAG,CAACU,IAAI,CAAC;IACpDZ,OAAO,CAACe,OAAO,CAACH,IAAI,CAAC;IACrB,OAAOU,IAAI;EACb;EAEA,SAASJ,SAASA,CAACN,IAAI,EAAE;IACvBZ,OAAO,CAACgB,IAAI,CAAC,iBAAiB,CAAC;IAC/B,OAAOb,IAAI,CAACoB,SAAS,GAAGtB,EAAE,CAACW,IAAI,CAAC,GAAGY,OAAO,CAACZ,IAAI,CAAC;EAClD;EAEA,SAASY,OAAOA,CAACZ,IAAI,EAAE;IACrB,IAAIA,IAAI,KAAK,IAAI,EAAE;MACjB,OAAOa,KAAK,CAACb,IAAI,CAAC;IACpB;IAEA,IAAItB,kBAAkB,CAACsB,IAAI,CAAC,EAAE;MAC5BZ,OAAO,CAACa,KAAK,CAAC,YAAY,CAAC;MAC3Bb,OAAO,CAACe,OAAO,CAACH,IAAI,CAAC;MACrBZ,OAAO,CAACgB,IAAI,CAAC,YAAY,CAAC;MAC1B,OAAOhB,OAAO,CAAC0B,OAAO,CACpBtB,qBAAqB,EACrBqB,KAAK,EACLlB,aAAa,GACTb,YAAY,CAACM,OAAO,EAAEwB,OAAO,EAAE,YAAY,EAAEjB,aAAa,GAAG,CAAC,CAAC,GAC/DiB,OAAO,CACZ;IACH;IAEAxB,OAAO,CAACa,KAAK,CAAC,eAAe,CAAC;IAC9B,OAAOc,eAAe,CAACf,IAAI,CAAC;EAC9B;EAEA,SAASe,eAAeA,CAACf,IAAI,EAAE;IAC7B,IAAIA,IAAI,KAAK,IAAI,IAAItB,kBAAkB,CAACsB,IAAI,CAAC,EAAE;MAC7CZ,OAAO,CAACgB,IAAI,CAAC,eAAe,CAAC;MAC7B,OAAOQ,OAAO,CAACZ,IAAI,CAAC;IACtB;IAEAZ,OAAO,CAACe,OAAO,CAACH,IAAI,CAAC;IACrB,OAAOe,eAAe;EACxB;EAEA,SAASF,KAAKA,CAACb,IAAI,EAAE;IACnBZ,OAAO,CAACgB,IAAI,CAAC,YAAY,CAAC;IAC1B,OAAOf,EAAE,CAACW,IAAI,CAAC;EACjB;EAEA,SAASP,oBAAoBA,CAACL,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;IAC9C,IAAI0B,IAAI,GAAG,CAAC;IACZ,OAAOlC,YAAY,CACjBM,OAAO,EACP6B,oBAAoB,EACpB,YAAY,EACZ,IAAI,CAACC,MAAM,CAACC,UAAU,CAACC,OAAO,CAACC,IAAI,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAC5DC,SAAS,GACT,CAAC,CACN;IAED,SAASN,oBAAoBA,CAACjB,IAAI,EAAE;MAClCZ,OAAO,CAACa,KAAK,CAAC,iBAAiB,CAAC;MAChCb,OAAO,CAACa,KAAK,CAAC,yBAAyB,CAAC;MACxC,OAAOuB,eAAe,CAACxB,IAAI,CAAC;IAC9B;IAEA,SAASwB,eAAeA,CAACxB,IAAI,EAAE;MAC7B,IAAIA,IAAI,KAAKF,MAAM,EAAE;QACnBV,OAAO,CAACe,OAAO,CAACH,IAAI,CAAC;QACrBgB,IAAI,EAAE;QACN,OAAOQ,eAAe;MACxB;MAEA,IAAIR,IAAI,GAAGnB,QAAQ,EAAE,OAAOP,GAAG,CAACU,IAAI,CAAC;MACrCZ,OAAO,CAACgB,IAAI,CAAC,yBAAyB,CAAC;MACvC,OAAOtB,YAAY,CAACM,OAAO,EAAEqC,kBAAkB,EAAE,YAAY,CAAC,CAACzB,IAAI,CAAC;IACtE;IAEA,SAASyB,kBAAkBA,CAACzB,IAAI,EAAE;MAChC,IAAIA,IAAI,KAAK,IAAI,IAAItB,kBAAkB,CAACsB,IAAI,CAAC,EAAE;QAC7CZ,OAAO,CAACgB,IAAI,CAAC,iBAAiB,CAAC;QAC/B,OAAOf,EAAE,CAACW,IAAI,CAAC;MACjB;MAEA,OAAOV,GAAG,CAACU,IAAI,CAAC;IAClB;EACF;AACF;AAEA0B,MAAM,CAACC,OAAO,GAAG5C,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}