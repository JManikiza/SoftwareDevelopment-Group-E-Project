{"ast":null,"code":"\"use strict\";\n\n/**\r\n * Naive, simple plugin to match inline nodes without attributes\r\n * This allows say <strong>foo</strong>, but not <strong class=\"very\">foo</strong>\r\n * For proper HTML support, you'll want a different plugin\r\n **/\nvar visit = require('unist-util-visit');\nvar type = 'virtualHtml';\nvar selfClosingRe = /^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\\s*\\/?>$/i;\nvar simpleTagRe = /^<(\\/?)([a-z]+)\\s*>$/;\nmodule.exports = function (tree) {\n  var open;\n  var currentParent;\n  visit(tree, 'html', function (node, index, parent) {\n    if (currentParent !== parent) {\n      open = [];\n      currentParent = parent;\n    }\n    var selfClosing = getSelfClosing(node);\n    if (selfClosing) {\n      parent.children.splice(index, 1, {\n        type: type,\n        tag: selfClosing,\n        position: node.position\n      });\n      return true;\n    }\n    var current = getSimpleTag(node, parent);\n    if (!current) {\n      return true;\n    }\n    var matching = findAndPull(open, current.tag);\n    if (matching) {\n      parent.children.splice(index, 0, virtual(current, matching, parent));\n    } else if (!current.opening) {\n      open.push(current);\n    }\n    return true;\n  }, true // Iterate in reverse\n  );\n\n  return tree;\n};\nfunction findAndPull(open, matchingTag) {\n  var i = open.length;\n  while (i--) {\n    if (open[i].tag === matchingTag) {\n      return open.splice(i, 1)[0];\n    }\n  }\n  return false;\n}\nfunction getSimpleTag(node, parent) {\n  var match = node.value.match(simpleTagRe);\n  return match ? {\n    tag: match[2],\n    opening: !match[1],\n    node: node\n  } : false;\n}\nfunction getSelfClosing(node) {\n  var match = node.value.match(selfClosingRe);\n  return match ? match[1] : false;\n}\nfunction virtual(fromNode, toNode, parent) {\n  var fromIndex = parent.children.indexOf(fromNode.node);\n  var toIndex = parent.children.indexOf(toNode.node);\n  var extracted = parent.children.splice(fromIndex, toIndex - fromIndex + 1);\n  var children = extracted.slice(1, -1);\n  return {\n    type: type,\n    children: children,\n    tag: fromNode.tag,\n    position: {\n      start: fromNode.node.position.start,\n      end: toNode.node.position.end,\n      indent: []\n    }\n  };\n}","map":{"version":3,"names":["visit","require","type","selfClosingRe","simpleTagRe","module","exports","tree","open","currentParent","node","index","parent","selfClosing","getSelfClosing","children","splice","tag","position","current","getSimpleTag","matching","findAndPull","virtual","opening","push","matchingTag","i","length","match","value","fromNode","toNode","fromIndex","indexOf","toIndex","extracted","slice","start","end","indent"],"sources":["G:/SoftwareDevelopment-Group-E-Project/react-app/node_modules/react-markdown/lib/plugins/naive-html.js"],"sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * Naive, simple plugin to match inline nodes without attributes\r\n * This allows say <strong>foo</strong>, but not <strong class=\"very\">foo</strong>\r\n * For proper HTML support, you'll want a different plugin\r\n **/\r\nvar visit = require('unist-util-visit');\r\n\r\nvar type = 'virtualHtml';\r\nvar selfClosingRe = /^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\\s*\\/?>$/i;\r\nvar simpleTagRe = /^<(\\/?)([a-z]+)\\s*>$/;\r\n\r\nmodule.exports = function (tree) {\r\n  var open;\r\n  var currentParent;\r\n  visit(tree, 'html', function (node, index, parent) {\r\n    if (currentParent !== parent) {\r\n      open = [];\r\n      currentParent = parent;\r\n    }\r\n\r\n    var selfClosing = getSelfClosing(node);\r\n\r\n    if (selfClosing) {\r\n      parent.children.splice(index, 1, {\r\n        type: type,\r\n        tag: selfClosing,\r\n        position: node.position\r\n      });\r\n      return true;\r\n    }\r\n\r\n    var current = getSimpleTag(node, parent);\r\n\r\n    if (!current) {\r\n      return true;\r\n    }\r\n\r\n    var matching = findAndPull(open, current.tag);\r\n\r\n    if (matching) {\r\n      parent.children.splice(index, 0, virtual(current, matching, parent));\r\n    } else if (!current.opening) {\r\n      open.push(current);\r\n    }\r\n\r\n    return true;\r\n  }, true // Iterate in reverse\r\n  );\r\n  return tree;\r\n};\r\n\r\nfunction findAndPull(open, matchingTag) {\r\n  var i = open.length;\r\n\r\n  while (i--) {\r\n    if (open[i].tag === matchingTag) {\r\n      return open.splice(i, 1)[0];\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction getSimpleTag(node, parent) {\r\n  var match = node.value.match(simpleTagRe);\r\n  return match ? {\r\n    tag: match[2],\r\n    opening: !match[1],\r\n    node: node\r\n  } : false;\r\n}\r\n\r\nfunction getSelfClosing(node) {\r\n  var match = node.value.match(selfClosingRe);\r\n  return match ? match[1] : false;\r\n}\r\n\r\nfunction virtual(fromNode, toNode, parent) {\r\n  var fromIndex = parent.children.indexOf(fromNode.node);\r\n  var toIndex = parent.children.indexOf(toNode.node);\r\n  var extracted = parent.children.splice(fromIndex, toIndex - fromIndex + 1);\r\n  var children = extracted.slice(1, -1);\r\n  return {\r\n    type: type,\r\n    children: children,\r\n    tag: fromNode.tag,\r\n    position: {\r\n      start: fromNode.node.position.start,\r\n      end: toNode.node.position.end,\r\n      indent: []\r\n    }\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}