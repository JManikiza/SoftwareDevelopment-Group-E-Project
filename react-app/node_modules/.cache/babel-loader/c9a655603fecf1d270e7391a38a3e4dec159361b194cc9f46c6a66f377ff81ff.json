{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSelectionRange = getSelectionRange;\nexports.hasSelectionSupport = hasSelectionSupport;\nexports.setSelectionRange = setSelectionRange;\nvar _isElementType = require(\"../misc/isElementType\");\n\n// https://github.com/jsdom/jsdom/blob/c2fb8ff94917a4d45e2398543f5dd2a8fed0bdab/lib/jsdom/living/nodes/HTMLInputElement-impl.js#L45\nvar selectionSupportType;\n(function (selectionSupportType) {\n  selectionSupportType[\"text\"] = \"text\";\n  selectionSupportType[\"search\"] = \"search\";\n  selectionSupportType[\"url\"] = \"url\";\n  selectionSupportType[\"tel\"] = \"tel\";\n  selectionSupportType[\"password\"] = \"password\";\n})(selectionSupportType || (selectionSupportType = {}));\nconst InputSelection = Symbol('inputSelection');\nfunction hasSelectionSupport(element) {\n  return (0, _isElementType.isElementType)(element, 'textarea') || (0, _isElementType.isElementType)(element, 'input') && Boolean(selectionSupportType[element.type]);\n}\nfunction getSelectionRange(element) {\n  if (hasSelectionSupport(element)) {\n    return {\n      selectionStart: element.selectionStart,\n      selectionEnd: element.selectionEnd\n    };\n  }\n  if ((0, _isElementType.isElementType)(element, 'input')) {\n    var _InputSelection;\n    return (_InputSelection = element[InputSelection]) != null ? _InputSelection : {\n      selectionStart: null,\n      selectionEnd: null\n    };\n  }\n  const selection = element.ownerDocument.getSelection(); // there should be no editing if the focusNode is outside of element\n  // TODO: properly handle selection ranges\n\n  if (selection != null && selection.rangeCount && element.contains(selection.focusNode)) {\n    const range = selection.getRangeAt(0);\n    return {\n      selectionStart: range.startOffset,\n      selectionEnd: range.endOffset\n    };\n  } else {\n    return {\n      selectionStart: null,\n      selectionEnd: null\n    };\n  }\n}\nfunction setSelectionRange(element, newSelectionStart, newSelectionEnd) {\n  const {\n    selectionStart,\n    selectionEnd\n  } = getSelectionRange(element);\n  if (selectionStart === newSelectionStart && selectionEnd === newSelectionEnd) {\n    return;\n  }\n  if (hasSelectionSupport(element)) {\n    element.setSelectionRange(newSelectionStart, newSelectionEnd);\n  }\n  if ((0, _isElementType.isElementType)(element, 'input')) {\n    ;\n    element[InputSelection] = {\n      selectionStart: newSelectionStart,\n      selectionEnd: newSelectionEnd\n    };\n  } // Moving the selection inside <input> or <textarea> does not alter the document Selection.\n\n  if ((0, _isElementType.isElementType)(element, 'input') || (0, _isElementType.isElementType)(element, 'textarea')) {\n    return;\n  }\n  const range = element.ownerDocument.createRange();\n  range.selectNodeContents(element); // istanbul ignore else\n\n  if (element.firstChild) {\n    range.setStart(element.firstChild, newSelectionStart);\n    range.setEnd(element.firstChild, newSelectionEnd);\n  }\n  const selection = element.ownerDocument.getSelection(); // istanbul ignore else\n\n  if (selection) {\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getSelectionRange","hasSelectionSupport","setSelectionRange","_isElementType","require","selectionSupportType","InputSelection","Symbol","element","isElementType","Boolean","type","selectionStart","selectionEnd","_InputSelection","selection","ownerDocument","getSelection","rangeCount","contains","focusNode","range","getRangeAt","startOffset","endOffset","newSelectionStart","newSelectionEnd","createRange","selectNodeContents","firstChild","setStart","setEnd","removeAllRanges","addRange"],"sources":["/Users/wallysonsilva/Documents/GitHub/SoftwareDevelopment-Group-E-Project/react-app/node_modules/@testing-library/user-event/dist/utils/edit/selectionRange.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSelectionRange = getSelectionRange;\nexports.hasSelectionSupport = hasSelectionSupport;\nexports.setSelectionRange = setSelectionRange;\n\nvar _isElementType = require(\"../misc/isElementType\");\n\n// https://github.com/jsdom/jsdom/blob/c2fb8ff94917a4d45e2398543f5dd2a8fed0bdab/lib/jsdom/living/nodes/HTMLInputElement-impl.js#L45\nvar selectionSupportType;\n\n(function (selectionSupportType) {\n  selectionSupportType[\"text\"] = \"text\";\n  selectionSupportType[\"search\"] = \"search\";\n  selectionSupportType[\"url\"] = \"url\";\n  selectionSupportType[\"tel\"] = \"tel\";\n  selectionSupportType[\"password\"] = \"password\";\n})(selectionSupportType || (selectionSupportType = {}));\n\nconst InputSelection = Symbol('inputSelection');\n\nfunction hasSelectionSupport(element) {\n  return (0, _isElementType.isElementType)(element, 'textarea') || (0, _isElementType.isElementType)(element, 'input') && Boolean(selectionSupportType[element.type]);\n}\n\nfunction getSelectionRange(element) {\n  if (hasSelectionSupport(element)) {\n    return {\n      selectionStart: element.selectionStart,\n      selectionEnd: element.selectionEnd\n    };\n  }\n\n  if ((0, _isElementType.isElementType)(element, 'input')) {\n    var _InputSelection;\n\n    return (_InputSelection = element[InputSelection]) != null ? _InputSelection : {\n      selectionStart: null,\n      selectionEnd: null\n    };\n  }\n\n  const selection = element.ownerDocument.getSelection(); // there should be no editing if the focusNode is outside of element\n  // TODO: properly handle selection ranges\n\n  if (selection != null && selection.rangeCount && element.contains(selection.focusNode)) {\n    const range = selection.getRangeAt(0);\n    return {\n      selectionStart: range.startOffset,\n      selectionEnd: range.endOffset\n    };\n  } else {\n    return {\n      selectionStart: null,\n      selectionEnd: null\n    };\n  }\n}\n\nfunction setSelectionRange(element, newSelectionStart, newSelectionEnd) {\n  const {\n    selectionStart,\n    selectionEnd\n  } = getSelectionRange(element);\n\n  if (selectionStart === newSelectionStart && selectionEnd === newSelectionEnd) {\n    return;\n  }\n\n  if (hasSelectionSupport(element)) {\n    element.setSelectionRange(newSelectionStart, newSelectionEnd);\n  }\n\n  if ((0, _isElementType.isElementType)(element, 'input')) {\n    ;\n    element[InputSelection] = {\n      selectionStart: newSelectionStart,\n      selectionEnd: newSelectionEnd\n    };\n  } // Moving the selection inside <input> or <textarea> does not alter the document Selection.\n\n\n  if ((0, _isElementType.isElementType)(element, 'input') || (0, _isElementType.isElementType)(element, 'textarea')) {\n    return;\n  }\n\n  const range = element.ownerDocument.createRange();\n  range.selectNodeContents(element); // istanbul ignore else\n\n  if (element.firstChild) {\n    range.setStart(element.firstChild, newSelectionStart);\n    range.setEnd(element.firstChild, newSelectionEnd);\n  }\n\n  const selection = element.ownerDocument.getSelection(); // istanbul ignore else\n\n  if (selection) {\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}