{"ast":null,"code":"'use strict';\n\nconst hexCharacters = 'a-f\\\\d';\nconst match3or4Hex = `#?[${hexCharacters}]{3}[${hexCharacters}]?`;\nconst match6or8Hex = `#?[${hexCharacters}]{6}([${hexCharacters}]{2})?`;\nconst nonHexChars = new RegExp(`[^#${hexCharacters}]`, 'gi');\nconst validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, 'i');\nmodule.exports = function (hex) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n    throw new TypeError('Expected a valid hex string');\n  }\n  hex = hex.replace(/^#/, '');\n  let alphaFromHex = 1;\n  if (hex.length === 8) {\n    alphaFromHex = Number.parseInt(hex.slice(6, 8), 16) / 255;\n    hex = hex.slice(0, 6);\n  }\n  if (hex.length === 4) {\n    alphaFromHex = Number.parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n    hex = hex.slice(0, 3);\n  }\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n  const number = Number.parseInt(hex, 16);\n  const red = number >> 16;\n  const green = number >> 8 & 255;\n  const blue = number & 255;\n  const alpha = typeof options.alpha === 'number' ? options.alpha : alphaFromHex;\n  if (options.format === 'array') {\n    return [red, green, blue, alpha];\n  }\n  if (options.format === 'css') {\n    const alphaString = alpha === 1 ? '' : ` / ${Number((alpha * 100).toFixed(2))}%`;\n    return `rgb(${red} ${green} ${blue}${alphaString})`;\n  }\n  return {\n    red,\n    green,\n    blue,\n    alpha\n  };\n};","map":{"version":3,"names":["hexCharacters","match3or4Hex","match6or8Hex","nonHexChars","RegExp","validHexSize","module","exports","hex","options","arguments","length","undefined","test","TypeError","replace","alphaFromHex","Number","parseInt","slice","repeat","number","red","green","blue","alpha","format","alphaString","toFixed"],"sources":["C:/Users/Mo/Desktop/SoftwareDevelopment-Group-E-Project/react-app/node_modules/hex-rgb/index.js"],"sourcesContent":["'use strict';\r\n\r\nconst hexCharacters = 'a-f\\\\d';\r\nconst match3or4Hex = `#?[${hexCharacters}]{3}[${hexCharacters}]?`;\r\nconst match6or8Hex = `#?[${hexCharacters}]{6}([${hexCharacters}]{2})?`;\r\nconst nonHexChars = new RegExp(`[^#${hexCharacters}]`, 'gi');\r\nconst validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, 'i');\r\n\r\nmodule.exports = (hex, options = {}) => {\r\n\tif (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\r\n\t\tthrow new TypeError('Expected a valid hex string');\r\n\t}\r\n\r\n\thex = hex.replace(/^#/, '');\r\n\tlet alphaFromHex = 1;\r\n\r\n\tif (hex.length === 8) {\r\n\t\talphaFromHex = Number.parseInt(hex.slice(6, 8), 16) / 255;\r\n\t\thex = hex.slice(0, 6);\r\n\t}\r\n\r\n\tif (hex.length === 4) {\r\n\t\talphaFromHex = Number.parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\r\n\t\thex = hex.slice(0, 3);\r\n\t}\r\n\r\n\tif (hex.length === 3) {\r\n\t\thex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\r\n\t}\r\n\r\n\tconst number = Number.parseInt(hex, 16);\r\n\tconst red = number >> 16;\r\n\tconst green = (number >> 8) & 255;\r\n\tconst blue = number & 255;\r\n\tconst alpha = typeof options.alpha === 'number' ? options.alpha : alphaFromHex;\r\n\r\n\tif (options.format === 'array') {\r\n\t\treturn [red, green, blue, alpha];\r\n\t}\r\n\r\n\tif (options.format === 'css') {\r\n\t\tconst alphaString = alpha === 1 ? '' : ` / ${Number((alpha * 100).toFixed(2))}%`;\r\n\t\treturn `rgb(${red} ${green} ${blue}${alphaString})`;\r\n\t}\r\n\r\n\treturn {red, green, blue, alpha};\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}