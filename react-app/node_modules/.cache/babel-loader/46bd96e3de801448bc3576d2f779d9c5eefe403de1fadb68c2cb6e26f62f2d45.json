{"ast":null,"code":"'use strict';\n\nmodule.exports = parse;\nvar fromMarkdown = require('mdast-util-from-markdown');\nfunction parse(options) {\n  var self = this;\n  this.Parser = parse;\n  function parse(doc) {\n    return fromMarkdown(doc, Object.assign({}, self.data('settings'), options, {\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    }));\n  }\n}","map":{"version":3,"names":["module","exports","parse","fromMarkdown","require","options","self","Parser","doc","Object","assign","data","extensions","mdastExtensions"],"sources":["C:/Users/Mo/Desktop/SoftwareDevelopment-Group-E-Project/react-app/node_modules/remark-parse/index.js"],"sourcesContent":["'use strict'\r\n\r\nmodule.exports = parse\r\n\r\nvar fromMarkdown = require('mdast-util-from-markdown')\r\n\r\nfunction parse(options) {\r\n  var self = this\r\n\r\n  this.Parser = parse\r\n\r\n  function parse(doc) {\r\n    return fromMarkdown(\r\n      doc,\r\n      Object.assign({}, self.data('settings'), options, {\r\n        // Note: these options are not in the readme.\r\n        // The goal is for them to be set by plugins on `data` instead of being\r\n        // passed by users.\r\n        extensions: self.data('micromarkExtensions') || [],\r\n        mdastExtensions: self.data('fromMarkdownExtensions') || []\r\n      })\r\n    )\r\n  }\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,KAAK;AAEtB,IAAIC,YAAY,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AAEtD,SAASF,KAAKA,CAACG,OAAO,EAAE;EACtB,IAAIC,IAAI,GAAG,IAAI;EAEf,IAAI,CAACC,MAAM,GAAGL,KAAK;EAEnB,SAASA,KAAKA,CAACM,GAAG,EAAE;IAClB,OAAOL,YAAY,CACjBK,GAAG,EACHC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,IAAI,CAACK,IAAI,CAAC,UAAU,CAAC,EAAEN,OAAO,EAAE;MAChD;MACA;MACA;MACAO,UAAU,EAAEN,IAAI,CAACK,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE;MAClDE,eAAe,EAAEP,IAAI,CAACK,IAAI,CAAC,wBAAwB,CAAC,IAAI;IAC1D,CAAC,CAAC,CACH;EACH;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}