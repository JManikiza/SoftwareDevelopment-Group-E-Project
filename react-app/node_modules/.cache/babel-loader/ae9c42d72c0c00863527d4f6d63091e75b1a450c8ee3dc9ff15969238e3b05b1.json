{"ast":null,"code":"'use strict';\n\nvar markdownSpace = require('../character/markdown-space.js');\nvar factorySpace = require('./factory-space.js');\nvar blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit: exit\n};\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  var self = this;\n  return start;\n  function start(code) {\n    if (code === 62) {\n      if (!self.containerState.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        });\n        self.containerState.open = true;\n      }\n      effects.enter('blockQuotePrefix');\n      effects.enter('blockQuoteMarker');\n      effects.consume(code);\n      effects.exit('blockQuoteMarker');\n      return after;\n    }\n    return nok(code);\n  }\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace');\n      effects.consume(code);\n      effects.exit('blockQuotePrefixWhitespace');\n      effects.exit('blockQuotePrefix');\n      return ok;\n    }\n    effects.exit('blockQuotePrefix');\n    return ok(code);\n  }\n}\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(effects, effects.attempt(blockQuote, ok, nok), 'linePrefix', this.parser.constructs.disable.null.indexOf('codeIndented') > -1 ? undefined : 4);\n}\nfunction exit(effects) {\n  effects.exit('blockQuote');\n}\nmodule.exports = blockQuote;","map":{"version":3,"names":["markdownSpace","require","factorySpace","blockQuote","name","tokenize","tokenizeBlockQuoteStart","continuation","tokenizeBlockQuoteContinuation","exit","effects","ok","nok","self","start","code","containerState","open","enter","_container","consume","after","attempt","parser","constructs","disable","null","indexOf","undefined","module","exports"],"sources":["C:/Users/JMani/Documents/GitHub/SoftwareDevelopment-Group-E-Project/react-app/node_modules/micromark/dist/tokenize/block-quote.js"],"sourcesContent":["'use strict'\n\nvar markdownSpace = require('../character/markdown-space.js')\nvar factorySpace = require('./factory-space.js')\n\nvar blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit: exit\n}\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  var self = this\n  return start\n\n  function start(code) {\n    if (code === 62) {\n      if (!self.containerState.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        self.containerState.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.indexOf('codeIndented') > -1\n      ? undefined\n      : 4\n  )\n}\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n\nmodule.exports = blockQuote\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,aAAa,GAAGC,OAAO,CAAC,gCAAgC,CAAC;AAC7D,IAAIC,YAAY,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAEhD,IAAIE,UAAU,GAAG;EACfC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAEC,uBAAuB;EACjCC,YAAY,EAAE;IACZF,QAAQ,EAAEG;EACZ,CAAC;EACDC,IAAI,EAAEA;AACR,CAAC;AAED,SAASH,uBAAuBA,CAACI,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EACjD,IAAIC,IAAI,GAAG,IAAI;EACf,OAAOC,KAAK;EAEZ,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnB,IAAIA,IAAI,KAAK,EAAE,EAAE;MACf,IAAI,CAACF,IAAI,CAACG,cAAc,CAACC,IAAI,EAAE;QAC7BP,OAAO,CAACQ,KAAK,CAAC,YAAY,EAAE;UAC1BC,UAAU,EAAE;QACd,CAAC,CAAC;QACFN,IAAI,CAACG,cAAc,CAACC,IAAI,GAAG,IAAI;MACjC;MAEAP,OAAO,CAACQ,KAAK,CAAC,kBAAkB,CAAC;MACjCR,OAAO,CAACQ,KAAK,CAAC,kBAAkB,CAAC;MACjCR,OAAO,CAACU,OAAO,CAACL,IAAI,CAAC;MACrBL,OAAO,CAACD,IAAI,CAAC,kBAAkB,CAAC;MAChC,OAAOY,KAAK;IACd;IAEA,OAAOT,GAAG,CAACG,IAAI,CAAC;EAClB;EAEA,SAASM,KAAKA,CAACN,IAAI,EAAE;IACnB,IAAIf,aAAa,CAACe,IAAI,CAAC,EAAE;MACvBL,OAAO,CAACQ,KAAK,CAAC,4BAA4B,CAAC;MAC3CR,OAAO,CAACU,OAAO,CAACL,IAAI,CAAC;MACrBL,OAAO,CAACD,IAAI,CAAC,4BAA4B,CAAC;MAC1CC,OAAO,CAACD,IAAI,CAAC,kBAAkB,CAAC;MAChC,OAAOE,EAAE;IACX;IAEAD,OAAO,CAACD,IAAI,CAAC,kBAAkB,CAAC;IAChC,OAAOE,EAAE,CAACI,IAAI,CAAC;EACjB;AACF;AAEA,SAASP,8BAA8BA,CAACE,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EACxD,OAAOV,YAAY,CACjBQ,OAAO,EACPA,OAAO,CAACY,OAAO,CAACnB,UAAU,EAAEQ,EAAE,EAAEC,GAAG,CAAC,EACpC,YAAY,EACZ,IAAI,CAACW,MAAM,CAACC,UAAU,CAACC,OAAO,CAACC,IAAI,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAC5DC,SAAS,GACT,CAAC,CACN;AACH;AAEA,SAASnB,IAAIA,CAACC,OAAO,EAAE;EACrBA,OAAO,CAACD,IAAI,CAAC,YAAY,CAAC;AAC5B;AAEAoB,MAAM,CAACC,OAAO,GAAG3B,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}