{"ast":null,"code":"'use strict';\n\nvar p = require('./minpath');\nvar proc = require('./minproc');\nvar buffer = require('is-buffer');\nmodule.exports = VFile;\nvar own = {}.hasOwnProperty;\n\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nvar order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];\nVFile.prototype.toString = toString;\n\n// Access full path (`~/index.min.js`).\nObject.defineProperty(VFile.prototype, 'path', {\n  get: getPath,\n  set: setPath\n});\n\n// Access parent path (`~`).\nObject.defineProperty(VFile.prototype, 'dirname', {\n  get: getDirname,\n  set: setDirname\n});\n\n// Access basename (`index.min.js`).\nObject.defineProperty(VFile.prototype, 'basename', {\n  get: getBasename,\n  set: setBasename\n});\n\n// Access extname (`.js`).\nObject.defineProperty(VFile.prototype, 'extname', {\n  get: getExtname,\n  set: setExtname\n});\n\n// Access stem (`index.min`).\nObject.defineProperty(VFile.prototype, 'stem', {\n  get: getStem,\n  set: setStem\n});\n\n// Construct a new file.\nfunction VFile(options) {\n  var prop;\n  var index;\n  if (!options) {\n    options = {};\n  } else if (typeof options === 'string' || buffer(options)) {\n    options = {\n      contents: options\n    };\n  } else if ('message' in options && 'messages' in options) {\n    return options;\n  }\n  if (!(this instanceof VFile)) {\n    return new VFile(options);\n  }\n  this.data = {};\n  this.messages = [];\n  this.history = [];\n  this.cwd = proc.cwd();\n\n  // Set path related properties in the correct order.\n  index = -1;\n  while (++index < order.length) {\n    prop = order[index];\n    if (own.call(options, prop)) {\n      this[prop] = options[prop];\n    }\n  }\n\n  // Set non-path related properties.\n  for (prop in options) {\n    if (order.indexOf(prop) < 0) {\n      this[prop] = options[prop];\n    }\n  }\n}\nfunction getPath() {\n  return this.history[this.history.length - 1];\n}\nfunction setPath(path) {\n  assertNonEmpty(path, 'path');\n  if (this.path !== path) {\n    this.history.push(path);\n  }\n}\nfunction getDirname() {\n  return typeof this.path === 'string' ? p.dirname(this.path) : undefined;\n}\nfunction setDirname(dirname) {\n  assertPath(this.path, 'dirname');\n  this.path = p.join(dirname || '', this.basename);\n}\nfunction getBasename() {\n  return typeof this.path === 'string' ? p.basename(this.path) : undefined;\n}\nfunction setBasename(basename) {\n  assertNonEmpty(basename, 'basename');\n  assertPart(basename, 'basename');\n  this.path = p.join(this.dirname || '', basename);\n}\nfunction getExtname() {\n  return typeof this.path === 'string' ? p.extname(this.path) : undefined;\n}\nfunction setExtname(extname) {\n  assertPart(extname, 'extname');\n  assertPath(this.path, 'extname');\n  if (extname) {\n    if (extname.charCodeAt(0) !== 46 /* `.` */) {\n      throw new Error('`extname` must start with `.`');\n    }\n    if (extname.indexOf('.', 1) > -1) {\n      throw new Error('`extname` cannot contain multiple dots');\n    }\n  }\n  this.path = p.join(this.dirname, this.stem + (extname || ''));\n}\nfunction getStem() {\n  return typeof this.path === 'string' ? p.basename(this.path, this.extname) : undefined;\n}\nfunction setStem(stem) {\n  assertNonEmpty(stem, 'stem');\n  assertPart(stem, 'stem');\n  this.path = p.join(this.dirname || '', stem + (this.extname || ''));\n}\n\n// Get the value of the file.\nfunction toString(encoding) {\n  return (this.contents || '').toString(encoding);\n}\n\n// Assert that `part` is not a path (i.e., does not contain `p.sep`).\nfunction assertPart(part, name) {\n  if (part && part.indexOf(p.sep) > -1) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + p.sep + '`');\n  }\n}\n\n// Assert that `part` is not empty.\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n\n// Assert `path` exists.\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}","map":{"version":3,"names":["p","require","proc","buffer","module","exports","VFile","own","hasOwnProperty","order","prototype","toString","Object","defineProperty","get","getPath","set","setPath","getDirname","setDirname","getBasename","setBasename","getExtname","setExtname","getStem","setStem","options","prop","index","contents","data","messages","history","cwd","length","call","indexOf","path","assertNonEmpty","push","dirname","undefined","assertPath","join","basename","assertPart","extname","charCodeAt","Error","stem","encoding","part","name","sep"],"sources":["C:/Users/jimmy/Desktop/sdgp/SoftwareDevelopment-Group-E-Project/react-app/node_modules/vfile/lib/core.js"],"sourcesContent":["'use strict'\r\n\r\nvar p = require('./minpath')\r\nvar proc = require('./minproc')\r\nvar buffer = require('is-buffer')\r\n\r\nmodule.exports = VFile\r\n\r\nvar own = {}.hasOwnProperty\r\n\r\n// Order of setting (least specific to most), we need this because otherwise\r\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\r\n// stem can be set.\r\nvar order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\r\n\r\nVFile.prototype.toString = toString\r\n\r\n// Access full path (`~/index.min.js`).\r\nObject.defineProperty(VFile.prototype, 'path', {get: getPath, set: setPath})\r\n\r\n// Access parent path (`~`).\r\nObject.defineProperty(VFile.prototype, 'dirname', {\r\n  get: getDirname,\r\n  set: setDirname\r\n})\r\n\r\n// Access basename (`index.min.js`).\r\nObject.defineProperty(VFile.prototype, 'basename', {\r\n  get: getBasename,\r\n  set: setBasename\r\n})\r\n\r\n// Access extname (`.js`).\r\nObject.defineProperty(VFile.prototype, 'extname', {\r\n  get: getExtname,\r\n  set: setExtname\r\n})\r\n\r\n// Access stem (`index.min`).\r\nObject.defineProperty(VFile.prototype, 'stem', {get: getStem, set: setStem})\r\n\r\n// Construct a new file.\r\nfunction VFile(options) {\r\n  var prop\r\n  var index\r\n\r\n  if (!options) {\r\n    options = {}\r\n  } else if (typeof options === 'string' || buffer(options)) {\r\n    options = {contents: options}\r\n  } else if ('message' in options && 'messages' in options) {\r\n    return options\r\n  }\r\n\r\n  if (!(this instanceof VFile)) {\r\n    return new VFile(options)\r\n  }\r\n\r\n  this.data = {}\r\n  this.messages = []\r\n  this.history = []\r\n  this.cwd = proc.cwd()\r\n\r\n  // Set path related properties in the correct order.\r\n  index = -1\r\n\r\n  while (++index < order.length) {\r\n    prop = order[index]\r\n\r\n    if (own.call(options, prop)) {\r\n      this[prop] = options[prop]\r\n    }\r\n  }\r\n\r\n  // Set non-path related properties.\r\n  for (prop in options) {\r\n    if (order.indexOf(prop) < 0) {\r\n      this[prop] = options[prop]\r\n    }\r\n  }\r\n}\r\n\r\nfunction getPath() {\r\n  return this.history[this.history.length - 1]\r\n}\r\n\r\nfunction setPath(path) {\r\n  assertNonEmpty(path, 'path')\r\n\r\n  if (this.path !== path) {\r\n    this.history.push(path)\r\n  }\r\n}\r\n\r\nfunction getDirname() {\r\n  return typeof this.path === 'string' ? p.dirname(this.path) : undefined\r\n}\r\n\r\nfunction setDirname(dirname) {\r\n  assertPath(this.path, 'dirname')\r\n  this.path = p.join(dirname || '', this.basename)\r\n}\r\n\r\nfunction getBasename() {\r\n  return typeof this.path === 'string' ? p.basename(this.path) : undefined\r\n}\r\n\r\nfunction setBasename(basename) {\r\n  assertNonEmpty(basename, 'basename')\r\n  assertPart(basename, 'basename')\r\n  this.path = p.join(this.dirname || '', basename)\r\n}\r\n\r\nfunction getExtname() {\r\n  return typeof this.path === 'string' ? p.extname(this.path) : undefined\r\n}\r\n\r\nfunction setExtname(extname) {\r\n  assertPart(extname, 'extname')\r\n  assertPath(this.path, 'extname')\r\n\r\n  if (extname) {\r\n    if (extname.charCodeAt(0) !== 46 /* `.` */) {\r\n      throw new Error('`extname` must start with `.`')\r\n    }\r\n\r\n    if (extname.indexOf('.', 1) > -1) {\r\n      throw new Error('`extname` cannot contain multiple dots')\r\n    }\r\n  }\r\n\r\n  this.path = p.join(this.dirname, this.stem + (extname || ''))\r\n}\r\n\r\nfunction getStem() {\r\n  return typeof this.path === 'string'\r\n    ? p.basename(this.path, this.extname)\r\n    : undefined\r\n}\r\n\r\nfunction setStem(stem) {\r\n  assertNonEmpty(stem, 'stem')\r\n  assertPart(stem, 'stem')\r\n  this.path = p.join(this.dirname || '', stem + (this.extname || ''))\r\n}\r\n\r\n// Get the value of the file.\r\nfunction toString(encoding) {\r\n  return (this.contents || '').toString(encoding)\r\n}\r\n\r\n// Assert that `part` is not a path (i.e., does not contain `p.sep`).\r\nfunction assertPart(part, name) {\r\n  if (part && part.indexOf(p.sep) > -1) {\r\n    throw new Error(\r\n      '`' + name + '` cannot be a path: did not expect `' + p.sep + '`'\r\n    )\r\n  }\r\n}\r\n\r\n// Assert that `part` is not empty.\r\nfunction assertNonEmpty(part, name) {\r\n  if (!part) {\r\n    throw new Error('`' + name + '` cannot be empty')\r\n  }\r\n}\r\n\r\n// Assert `path` exists.\r\nfunction assertPath(path, name) {\r\n  if (!path) {\r\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}