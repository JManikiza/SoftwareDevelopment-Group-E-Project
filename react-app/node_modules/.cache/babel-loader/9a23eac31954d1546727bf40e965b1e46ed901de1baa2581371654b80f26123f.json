{"ast":null,"code":"'use strict';\n\n/* Expose. */\nmodule.exports = visitParents;\n\n/* Visit. */\nfunction visitParents(tree, type, visitor) {\n  var stack = [];\n  if (typeof type === 'function') {\n    visitor = type;\n    type = null;\n  }\n  one(tree);\n\n  /* Visit a single node. */\n  function one(node) {\n    var result;\n    if (!type || node.type === type) {\n      result = visitor(node, stack.concat());\n    }\n    if (node.children && result !== false) {\n      return all(node.children, node);\n    }\n    return result;\n  }\n\n  /* Visit children in `parent`. */\n  function all(children, parent) {\n    var length = children.length;\n    var index = -1;\n    var child;\n    stack.push(parent);\n    while (++index < length) {\n      child = children[index];\n      if (child && one(child) === false) {\n        return false;\n      }\n    }\n    stack.pop();\n    return true;\n  }\n}","map":{"version":3,"names":["module","exports","visitParents","tree","type","visitor","stack","one","node","result","concat","children","all","parent","length","index","child","push","pop"],"sources":["D:/SoftwareDevelopment-Group-E-Project/react-app/node_modules/unist-util-visit-parents/index.js"],"sourcesContent":["'use strict'\r\n\r\n/* Expose. */\r\nmodule.exports = visitParents\r\n\r\n/* Visit. */\r\nfunction visitParents(tree, type, visitor) {\r\n  var stack = []\r\n\r\n  if (typeof type === 'function') {\r\n    visitor = type\r\n    type = null\r\n  }\r\n\r\n  one(tree)\r\n\r\n  /* Visit a single node. */\r\n  function one(node) {\r\n    var result\r\n\r\n    if (!type || node.type === type) {\r\n      result = visitor(node, stack.concat())\r\n    }\r\n\r\n    if (node.children && result !== false) {\r\n      return all(node.children, node)\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  /* Visit children in `parent`. */\r\n  function all(children, parent) {\r\n    var length = children.length\r\n    var index = -1\r\n    var child\r\n\r\n    stack.push(parent)\r\n\r\n    while (++index < length) {\r\n      child = children[index]\r\n\r\n      if (child && one(child) === false) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    stack.pop()\r\n\r\n    return true\r\n  }\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAEZ;AACAA,MAAM,CAACC,OAAO,GAAGC,YAAY;;AAE7B;AACA,SAASA,YAAYA,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;EACzC,IAAIC,KAAK,GAAG,EAAE;EAEd,IAAI,OAAOF,IAAI,KAAK,UAAU,EAAE;IAC9BC,OAAO,GAAGD,IAAI;IACdA,IAAI,GAAG,IAAI;EACb;EAEAG,GAAG,CAACJ,IAAI,CAAC;;EAET;EACA,SAASI,GAAGA,CAACC,IAAI,EAAE;IACjB,IAAIC,MAAM;IAEV,IAAI,CAACL,IAAI,IAAII,IAAI,CAACJ,IAAI,KAAKA,IAAI,EAAE;MAC/BK,MAAM,GAAGJ,OAAO,CAACG,IAAI,EAAEF,KAAK,CAACI,MAAM,EAAE,CAAC;IACxC;IAEA,IAAIF,IAAI,CAACG,QAAQ,IAAIF,MAAM,KAAK,KAAK,EAAE;MACrC,OAAOG,GAAG,CAACJ,IAAI,CAACG,QAAQ,EAAEH,IAAI,CAAC;IACjC;IAEA,OAAOC,MAAM;EACf;;EAEA;EACA,SAASG,GAAGA,CAACD,QAAQ,EAAEE,MAAM,EAAE;IAC7B,IAAIC,MAAM,GAAGH,QAAQ,CAACG,MAAM;IAC5B,IAAIC,KAAK,GAAG,CAAC,CAAC;IACd,IAAIC,KAAK;IAETV,KAAK,CAACW,IAAI,CAACJ,MAAM,CAAC;IAElB,OAAO,EAAEE,KAAK,GAAGD,MAAM,EAAE;MACvBE,KAAK,GAAGL,QAAQ,CAACI,KAAK,CAAC;MAEvB,IAAIC,KAAK,IAAIT,GAAG,CAACS,KAAK,CAAC,KAAK,KAAK,EAAE;QACjC,OAAO,KAAK;MACd;IACF;IAEAV,KAAK,CAACY,GAAG,EAAE;IAEX,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}