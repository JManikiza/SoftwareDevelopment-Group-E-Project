{"ast":null,"code":"'use strict';\n\nfunction normalizeIdentifier(value) {\n  return value // Collapse Markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n  .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no object method is uppercase.\n  .toLowerCase().toUpperCase();\n}\nmodule.exports = normalizeIdentifier;","map":{"version":3,"names":["normalizeIdentifier","value","replace","toLowerCase","toUpperCase","module","exports"],"sources":["C:/Users/Mo/Desktop/SoftwareDevelopment-Group-E-Project/react-app/node_modules/micromark/dist/util/normalize-identifier.js"],"sourcesContent":["'use strict'\r\n\r\nfunction normalizeIdentifier(value) {\r\n  return (\r\n    value // Collapse Markdown whitespace.\r\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\r\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\r\n      // counterpart is uppercased will result in a different uppercase\r\n      // character.\r\n      // Hence, to get that form, we perform both lower- and uppercase.\r\n      // Upper case makes sure keys will not interact with default prototypal\r\n      // methods: no object method is uppercase.\r\n      .toLowerCase()\r\n      .toUpperCase()\r\n  )\r\n}\r\n\r\nmodule.exports = normalizeIdentifier\r\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,mBAAmBA,CAACC,KAAK,EAAE;EAClC,OACEA,KAAK,CAAC;EAAA,CACHC,OAAO,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;EAAA,CAC5BA,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;EACvB;EACA;EACA;EACA;EACA;EAAA,CACCC,WAAW,EAAE,CACbC,WAAW,EAAE;AAEpB;AAEAC,MAAM,CAACC,OAAO,GAAGN,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}