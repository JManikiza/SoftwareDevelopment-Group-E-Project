{"ast":null,"code":"'use strict';\n\nmodule.exports = convert;\nfunction convert(test) {\n  if (test == null) {\n    return ok;\n  }\n  if (typeof test === 'string') {\n    return typeFactory(test);\n  }\n  if (typeof test === 'object') {\n    return 'length' in test ? anyFactory(test) : allFactory(test);\n  }\n  if (typeof test === 'function') {\n    return test;\n  }\n  throw new Error('Expected function, string, or object as test');\n}\n\n// Utility assert each property in `test` is represented in `node`, and each\n// values are strictly equal.\nfunction allFactory(test) {\n  return all;\n  function all(node) {\n    var key;\n    for (key in test) {\n      if (node[key] !== test[key]) return false;\n    }\n    return true;\n  }\n}\nfunction anyFactory(tests) {\n  var checks = [];\n  var index = -1;\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index]);\n  }\n  return any;\n  function any() {\n    var index = -1;\n    while (++index < checks.length) {\n      if (checks[index].apply(this, arguments)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n// Utility to convert a string into a function which checks a given node’s type\n// for said string.\nfunction typeFactory(test) {\n  return type;\n  function type(node) {\n    return Boolean(node && node.type === test);\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true;\n}","map":{"version":3,"names":["module","exports","convert","test","ok","typeFactory","anyFactory","allFactory","Error","all","node","key","tests","checks","index","length","any","apply","arguments","type","Boolean"],"sources":["/Users/wallysonsilva/Documents/GitHub/SoftwareDevelopment-Group-E-Project/react-app/node_modules/unist-util-is/convert.js"],"sourcesContent":["'use strict'\n\nmodule.exports = convert\n\nfunction convert(test) {\n  if (test == null) {\n    return ok\n  }\n\n  if (typeof test === 'string') {\n    return typeFactory(test)\n  }\n\n  if (typeof test === 'object') {\n    return 'length' in test ? anyFactory(test) : allFactory(test)\n  }\n\n  if (typeof test === 'function') {\n    return test\n  }\n\n  throw new Error('Expected function, string, or object as test')\n}\n\n// Utility assert each property in `test` is represented in `node`, and each\n// values are strictly equal.\nfunction allFactory(test) {\n  return all\n\n  function all(node) {\n    var key\n\n    for (key in test) {\n      if (node[key] !== test[key]) return false\n    }\n\n    return true\n  }\n}\n\nfunction anyFactory(tests) {\n  var checks = []\n  var index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return any\n\n  function any() {\n    var index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, arguments)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n// Utility to convert a string into a function which checks a given node’s type\n// for said string.\nfunction typeFactory(test) {\n  return type\n\n  function type(node) {\n    return Boolean(node && node.type === test)\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,OAAO;AAExB,SAASA,OAAOA,CAACC,IAAI,EAAE;EACrB,IAAIA,IAAI,IAAI,IAAI,EAAE;IAChB,OAAOC,EAAE;EACX;EAEA,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAOE,WAAW,CAACF,IAAI,CAAC;EAC1B;EAEA,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO,QAAQ,IAAIA,IAAI,GAAGG,UAAU,CAACH,IAAI,CAAC,GAAGI,UAAU,CAACJ,IAAI,CAAC;EAC/D;EAEA,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE;IAC9B,OAAOA,IAAI;EACb;EAEA,MAAM,IAAIK,KAAK,CAAC,8CAA8C,CAAC;AACjE;;AAEA;AACA;AACA,SAASD,UAAUA,CAACJ,IAAI,EAAE;EACxB,OAAOM,GAAG;EAEV,SAASA,GAAGA,CAACC,IAAI,EAAE;IACjB,IAAIC,GAAG;IAEP,KAAKA,GAAG,IAAIR,IAAI,EAAE;MAChB,IAAIO,IAAI,CAACC,GAAG,CAAC,KAAKR,IAAI,CAACQ,GAAG,CAAC,EAAE,OAAO,KAAK;IAC3C;IAEA,OAAO,IAAI;EACb;AACF;AAEA,SAASL,UAAUA,CAACM,KAAK,EAAE;EACzB,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,KAAK,GAAG,CAAC,CAAC;EAEd,OAAO,EAAEA,KAAK,GAAGF,KAAK,CAACG,MAAM,EAAE;IAC7BF,MAAM,CAACC,KAAK,CAAC,GAAGZ,OAAO,CAACU,KAAK,CAACE,KAAK,CAAC,CAAC;EACvC;EAEA,OAAOE,GAAG;EAEV,SAASA,GAAGA,CAAA,EAAG;IACb,IAAIF,KAAK,GAAG,CAAC,CAAC;IAEd,OAAO,EAAEA,KAAK,GAAGD,MAAM,CAACE,MAAM,EAAE;MAC9B,IAAIF,MAAM,CAACC,KAAK,CAAC,CAACG,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,EAAE;QACxC,OAAO,IAAI;MACb;IACF;IAEA,OAAO,KAAK;EACd;AACF;;AAEA;AACA;AACA,SAASb,WAAWA,CAACF,IAAI,EAAE;EACzB,OAAOgB,IAAI;EAEX,SAASA,IAAIA,CAACT,IAAI,EAAE;IAClB,OAAOU,OAAO,CAACV,IAAI,IAAIA,IAAI,CAACS,IAAI,KAAKhB,IAAI,CAAC;EAC5C;AACF;;AAEA;AACA,SAASC,EAAEA,CAAA,EAAG;EACZ,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"script","externalDependencies":[]}