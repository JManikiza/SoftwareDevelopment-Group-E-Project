{"ast":null,"code":"'use strict';\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js');\nvar factorySpace = require('./factory-space.js');\nvar partialBlankLine = {\n  tokenize: tokenizePartialBlankLine,\n  partial: true\n};\nfunction tokenizePartialBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix');\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}\nmodule.exports = partialBlankLine;","map":{"version":3,"names":["markdownLineEnding","require","factorySpace","partialBlankLine","tokenize","tokenizePartialBlankLine","partial","effects","ok","nok","afterWhitespace","code","module","exports"],"sources":["C:/Users/JMani/Documents/GitHub/SoftwareDevelopment-Group-E-Project/react-app/node_modules/micromark/dist/tokenize/partial-blank-line.js"],"sourcesContent":["'use strict'\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\nvar factorySpace = require('./factory-space.js')\n\nvar partialBlankLine = {\n  tokenize: tokenizePartialBlankLine,\n  partial: true\n}\n\nfunction tokenizePartialBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n\nmodule.exports = partialBlankLine\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,sCAAsC,CAAC;AACxE,IAAIC,YAAY,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAEhD,IAAIE,gBAAgB,GAAG;EACrBC,QAAQ,EAAEC,wBAAwB;EAClCC,OAAO,EAAE;AACX,CAAC;AAED,SAASD,wBAAwBA,CAACE,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EAClD,OAAOP,YAAY,CAACK,OAAO,EAAEG,eAAe,EAAE,YAAY,CAAC;EAE3D,SAASA,eAAeA,CAACC,IAAI,EAAE;IAC7B,OAAOA,IAAI,KAAK,IAAI,IAAIX,kBAAkB,CAACW,IAAI,CAAC,GAAGH,EAAE,CAACG,IAAI,CAAC,GAAGF,GAAG,CAACE,IAAI,CAAC;EACzE;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGV,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}