{"ast":null,"code":"'use strict';\n\nvar markdownLineEnding = require('../character/markdown-line-ending.js');\nvar factorySpace = require('./factory-space.js');\nfunction titleFactory(effects, ok, nok, type, markerType, stringType) {\n  var marker;\n  return start;\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    marker = code === 40 ? 41 : code;\n    return atFirstTitleBreak;\n  }\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atTitleBreak(code);\n  }\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return atFirstTitleBreak(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return factorySpace(effects, atTitleBreak, 'linePrefix');\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return title(code);\n  }\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString');\n      return atTitleBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? titleEscape : title;\n  }\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return title;\n    }\n    return title(code);\n  }\n}\nmodule.exports = titleFactory;","map":{"version":3,"names":["markdownLineEnding","require","factorySpace","titleFactory","effects","ok","nok","type","markerType","stringType","marker","start","code","enter","consume","exit","atFirstTitleBreak","atTitleBreak","contentType","title","titleEscape","module","exports"],"sources":["G:/SoftwareDevelopment-Group-E-Project/react-app/node_modules/micromark/dist/tokenize/factory-title.js"],"sourcesContent":["'use strict'\r\n\r\nvar markdownLineEnding = require('../character/markdown-line-ending.js')\r\nvar factorySpace = require('./factory-space.js')\r\n\r\nfunction titleFactory(effects, ok, nok, type, markerType, stringType) {\r\n  var marker\r\n  return start\r\n\r\n  function start(code) {\r\n    effects.enter(type)\r\n    effects.enter(markerType)\r\n    effects.consume(code)\r\n    effects.exit(markerType)\r\n    marker = code === 40 ? 41 : code\r\n    return atFirstTitleBreak\r\n  }\r\n\r\n  function atFirstTitleBreak(code) {\r\n    if (code === marker) {\r\n      effects.enter(markerType)\r\n      effects.consume(code)\r\n      effects.exit(markerType)\r\n      effects.exit(type)\r\n      return ok\r\n    }\r\n\r\n    effects.enter(stringType)\r\n    return atTitleBreak(code)\r\n  }\r\n\r\n  function atTitleBreak(code) {\r\n    if (code === marker) {\r\n      effects.exit(stringType)\r\n      return atFirstTitleBreak(marker)\r\n    }\r\n\r\n    if (code === null) {\r\n      return nok(code)\r\n    } // Note: blank lines can’t exist in content.\r\n\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter('lineEnding')\r\n      effects.consume(code)\r\n      effects.exit('lineEnding')\r\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\r\n    }\r\n\r\n    effects.enter('chunkString', {\r\n      contentType: 'string'\r\n    })\r\n    return title(code)\r\n  }\r\n\r\n  function title(code) {\r\n    if (code === marker || code === null || markdownLineEnding(code)) {\r\n      effects.exit('chunkString')\r\n      return atTitleBreak(code)\r\n    }\r\n\r\n    effects.consume(code)\r\n    return code === 92 ? titleEscape : title\r\n  }\r\n\r\n  function titleEscape(code) {\r\n    if (code === marker || code === 92) {\r\n      effects.consume(code)\r\n      return title\r\n    }\r\n\r\n    return title(code)\r\n  }\r\n}\r\n\r\nmodule.exports = titleFactory\r\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,sCAAsC,CAAC;AACxE,IAAIC,YAAY,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAEhD,SAASE,YAAYA,CAACC,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAEC,IAAI,EAAEC,UAAU,EAAEC,UAAU,EAAE;EACpE,IAAIC,MAAM;EACV,OAAOC,KAAK;EAEZ,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnBR,OAAO,CAACS,KAAK,CAACN,IAAI,CAAC;IACnBH,OAAO,CAACS,KAAK,CAACL,UAAU,CAAC;IACzBJ,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;IACrBR,OAAO,CAACW,IAAI,CAACP,UAAU,CAAC;IACxBE,MAAM,GAAGE,IAAI,KAAK,EAAE,GAAG,EAAE,GAAGA,IAAI;IAChC,OAAOI,iBAAiB;EAC1B;EAEA,SAASA,iBAAiBA,CAACJ,IAAI,EAAE;IAC/B,IAAIA,IAAI,KAAKF,MAAM,EAAE;MACnBN,OAAO,CAACS,KAAK,CAACL,UAAU,CAAC;MACzBJ,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;MACrBR,OAAO,CAACW,IAAI,CAACP,UAAU,CAAC;MACxBJ,OAAO,CAACW,IAAI,CAACR,IAAI,CAAC;MAClB,OAAOF,EAAE;IACX;IAEAD,OAAO,CAACS,KAAK,CAACJ,UAAU,CAAC;IACzB,OAAOQ,YAAY,CAACL,IAAI,CAAC;EAC3B;EAEA,SAASK,YAAYA,CAACL,IAAI,EAAE;IAC1B,IAAIA,IAAI,KAAKF,MAAM,EAAE;MACnBN,OAAO,CAACW,IAAI,CAACN,UAAU,CAAC;MACxB,OAAOO,iBAAiB,CAACN,MAAM,CAAC;IAClC;IAEA,IAAIE,IAAI,KAAK,IAAI,EAAE;MACjB,OAAON,GAAG,CAACM,IAAI,CAAC;IAClB,CAAC,CAAC;;IAEF,IAAIZ,kBAAkB,CAACY,IAAI,CAAC,EAAE;MAC5BR,OAAO,CAACS,KAAK,CAAC,YAAY,CAAC;MAC3BT,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;MACrBR,OAAO,CAACW,IAAI,CAAC,YAAY,CAAC;MAC1B,OAAOb,YAAY,CAACE,OAAO,EAAEa,YAAY,EAAE,YAAY,CAAC;IAC1D;IAEAb,OAAO,CAACS,KAAK,CAAC,aAAa,EAAE;MAC3BK,WAAW,EAAE;IACf,CAAC,CAAC;IACF,OAAOC,KAAK,CAACP,IAAI,CAAC;EACpB;EAEA,SAASO,KAAKA,CAACP,IAAI,EAAE;IACnB,IAAIA,IAAI,KAAKF,MAAM,IAAIE,IAAI,KAAK,IAAI,IAAIZ,kBAAkB,CAACY,IAAI,CAAC,EAAE;MAChER,OAAO,CAACW,IAAI,CAAC,aAAa,CAAC;MAC3B,OAAOE,YAAY,CAACL,IAAI,CAAC;IAC3B;IAEAR,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;IACrB,OAAOA,IAAI,KAAK,EAAE,GAAGQ,WAAW,GAAGD,KAAK;EAC1C;EAEA,SAASC,WAAWA,CAACR,IAAI,EAAE;IACzB,IAAIA,IAAI,KAAKF,MAAM,IAAIE,IAAI,KAAK,EAAE,EAAE;MAClCR,OAAO,CAACU,OAAO,CAACF,IAAI,CAAC;MACrB,OAAOO,KAAK;IACd;IAEA,OAAOA,KAAK,CAACP,IAAI,CAAC;EACpB;AACF;AAEAS,MAAM,CAACC,OAAO,GAAGnB,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}