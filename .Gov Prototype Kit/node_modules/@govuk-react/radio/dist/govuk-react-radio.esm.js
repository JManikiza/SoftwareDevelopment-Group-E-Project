import * as React from 'react';
import styled from 'styled-components';
import { FOCUS_COLOUR } from 'govuk-colours';
import { typography, spacing } from '@govuk-react/lib';
import HintText from '@govuk-react/hint-text';
import { SPACING_POINTS, MEDIA_QUERIES, FOCUS_WIDTH, BORDER_WIDTH_FORM_ELEMENT, FOCUS_WIDTH_RAW } from '@govuk-react/constants';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var _excluded = ["inline", "children", "className", "hint"];
var radioSize = SPACING_POINTS[7];
var labelPaddingLeftRight = SPACING_POINTS[3]; // When the default focus width is used on a curved edge it looks visually smaller.
// So for the circular radios we bump the default to make it look visually consistent.

var RADIOS_FOCUS_WIDTH = "".concat(FOCUS_WIDTH_RAW + 1, "px");
var Label = styled('label').withConfig({
  displayName: "src__Label",
  componentId: "sc-9fy7us-0"
})(typography.font({
  size: 19
}), {
  display: 'block',
  position: 'relative',
  minHeight: radioSize,
  padding: "0 0 0 ".concat(radioSize, "px"),
  clear: 'left'
}, function (_ref) {
  var inline = _ref.inline;
  return inline && _defineProperty({}, MEDIA_QUERIES.LARGESCREEN, {
    "float": 'left',
    clear: 'none',
    marginRight: SPACING_POINTS[4]
  });
}, spacing.withWhiteSpace({
  marginBottom: 2
}));
var Input = styled('input').withConfig({
  displayName: "src__Input",
  componentId: "sc-9fy7us-1"
})({
  position: 'absolute',
  zIndex: 1,
  top: 0,
  left: 0,
  width: radioSize,
  height: radioSize,
  cursor: 'pointer',
  opacity: 0,
  ':checked + span::after': {
    opacity: 1
  },
  ':focus + span::before': {
    outline: "".concat(FOCUS_WIDTH, " solid transparent"),
    outlineOffset: FOCUS_WIDTH,
    boxShadow: "0 0 0 ".concat(RADIOS_FOCUS_WIDTH, " ").concat(FOCUS_COLOUR)
  }
}, function (_ref3) {
  var disabled = _ref3.disabled;
  return {
    cursor: disabled ? 'auto' : 'pointer',
    ' + span': {
      opacity: disabled ? '.5' : '1',
      pointerEvents: disabled ? 'none' : 'auto'
    }
  };
});
var LabelText = styled('span').withConfig({
  displayName: "src__LabelText",
  componentId: "sc-9fy7us-2"
})({
  display: 'inline-block',
  marginBottom: 0,
  padding: "8px ".concat(labelPaddingLeftRight, "px ").concat(SPACING_POINTS[1], "px"),
  cursor: 'pointer',
  MsTouchAction: 'manipulation',
  touchAction: 'manipulation',
  ':before': {
    content: "''",
    boxSizing: 'border-box',
    position: 'absolute',
    top: 0,
    left: 0,
    width: radioSize,
    height: radioSize,
    border: "".concat(BORDER_WIDTH_FORM_ELEMENT, " solid black"),
    borderRadius: '50%',
    background: 'transparent'
  },
  ':after': {
    content: "''",
    position: 'absolute',
    top: SPACING_POINTS[2],
    left: SPACING_POINTS[2],
    width: 0,
    height: 0,
    border: "".concat(SPACING_POINTS[2], "px solid"),
    borderRadius: '50%',
    background: 'currentColor',
    opacity: 0
  }
});
var StyledRadioHint = styled(HintText).withConfig({
  displayName: "src__StyledRadioHint",
  componentId: "sc-9fy7us-3"
})({
  display: 'block',
  paddingLeft: labelPaddingLeftRight,
  paddingRight: labelPaddingLeftRight
});
/**
 * Use the radios component when users can only select one option from a list.
 *
 * - https://govuk-react.github.io/govuk-react/?path=/docs/radio
 * - https://design-system.service.gov.uk/components/radios/
 */

var Radio = /*#__PURE__*/React.forwardRef(function (_ref4, ref) {
  var inline = _ref4.inline,
      children = _ref4.children,
      className = _ref4.className,
      hint = _ref4.hint,
      input = _objectWithoutProperties(_ref4, _excluded);

  return /*#__PURE__*/React.createElement(Label, {
    inline: inline,
    className: className
  }, /*#__PURE__*/React.createElement(Input, _extends({
    type: "radio",
    ref: ref
  }, input)), /*#__PURE__*/React.createElement(LabelText, null, children), hint && /*#__PURE__*/React.createElement(StyledRadioHint, null, hint));
});
Radio.defaultProps = {
  hint: undefined,
  inline: false,
  className: undefined
};
Radio.displayName = 'Radio';

export { Radio, Radio as default };
