import styled from 'styled-components';
import { MEDIA_QUERIES, GUTTER_HALF } from '@govuk-react/constants';
import { spacing } from '@govuk-react/lib';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

var colValues = {
  columnOneQuarter: '25%',
  columnOneThird: '33.3333%',
  columnOneHalf: '50%',
  columnTwoThirds: '66.6667%',
  columnThreeQuarters: '75%',
  columnFull: '100%'
};
var widthFromProps = spacing.withWidth({
  noDefault: true
});
var desktopWidthFromProps = spacing.withWidth({
  mediaQuery: MEDIA_QUERIES.DESKTOP,
  noDefault: true
});

function setGrowShrink(style) {
  var hasAutoWidth = [undefined, 'auto'].includes(style.width); // No explicit width means auto, so grow/shrink should be set

  return _objectSpread2(_objectSpread2({}, style), {}, {
    flexGrow: hasAutoWidth ? 1 : 0,
    flexShrink: hasAutoWidth ? 1 : 0
  });
}
/**
 * Grid Column.
 *
 * Should always be wrapped by `GridRow`. Will always render a column at full width if
 * the browser width is below the `TABLET` breakpoint.
 *
 * NB our grid is based on flex-box, which differs from govuk-frontend, which instead uses
 * floats, however it is otherwise similar to use.
 *
 * - https://govuk-react.github.io/govuk-react/?path=/docs/grid-col
 *
 */


var GridCol = styled('div').withConfig({
  displayName: "src__GridCol",
  componentId: "sc-gufadr-0"
})({
  boxSizing: 'border-box',
  paddingRight: GUTTER_HALF,
  paddingLeft: GUTTER_HALF
}, function (props) {
  // if setWidth is set, then columnOneQuarter etc props will be ignored
  var widthStyle = widthFromProps(props);

  if (!widthStyle) {
    var widthValue;
    Object.entries(props).forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];

      if (colValues[key] && value === true) {
        if (process.env.NODE_ENV !== 'production') {
          var newKey = key.replace('column', '').replace(/^([A-Z][a-z]+)([A-Z])/, '$1-$2').toLocaleLowerCase(); // eslint-disable-next-line no-console

          console.warn("deprecated prop ".concat(key, " used in GridCol, please replace with setWidth=\"").concat(newKey, "\""));
        }

        widthValue = colValues[key];
      }
    });
    widthStyle = _defineProperty({}, MEDIA_QUERIES.TABLET, {
      width: widthValue
    });
  }

  widthStyle[MEDIA_QUERIES.TABLET] = setGrowShrink(widthStyle[MEDIA_QUERIES.TABLET]);
  var desktopWidthStyle = desktopWidthFromProps({
    setWidth: props.setDesktopWidth
  });

  if (desktopWidthStyle) {
    desktopWidthStyle[MEDIA_QUERIES.DESKTOP] = setGrowShrink(desktopWidthStyle[MEDIA_QUERIES.DESKTOP]);
  }

  return _objectSpread2(_objectSpread2({}, widthStyle), desktopWidthStyle);
});
GridCol.defaultProps = {
  children: undefined,
  columnOneQuarter: false,
  columnOneThird: false,
  columnOneHalf: false,
  columnTwoThirds: false,
  columnThreeQuarters: false,
  columnFull: false,
  setWidth: undefined,
  setDesktopWidth: undefined
};
GridCol.displayName = 'GridCol';

export { GridCol, GridCol as default };
