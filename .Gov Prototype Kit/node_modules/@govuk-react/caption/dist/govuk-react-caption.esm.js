import styled from 'styled-components';
import { SECONDARY_TEXT_COLOUR } from 'govuk-colours';
import { typography, spacing } from '@govuk-react/lib';
import { CAPTION_SIZES, SPACING_POINTS, MEDIA_QUERIES } from '@govuk-react/constants';

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

/**
 * Sometimes you may need to make it clear that a page is part of a larger section or group. To do this, you can use a heading with a caption above it.
 *
 * - https://govuk-react.github.io/govuk-react/?path=/docs/caption
 * - https://design-system.service.gov.uk/styles/typography/#headings
 */

var Caption = styled('span').withConfig({
  displayName: "src__Caption",
  componentId: "sc-dd9g0r-0"
})(function (_ref) {
  var size = _ref.size;
  var actualSize = Number.isNaN(Number(size)) ? CAPTION_SIZES[size] : size;

  if (!actualSize) {
    throw Error("Unknown size ".concat(size, " used for header."));
  }

  return typography.font({
    size: actualSize
  });
}, function (_ref2) {
  var size = _ref2.size;
  var actualSize = Number.isNaN(Number(size)) ? CAPTION_SIZES[size] : size; // bottom margin - hard-coded values because they're a bit odd

  var marginStyle = actualSize > 19 ? {
    marginBottom: SPACING_POINTS[1]
  } : undefined;
  var marginResponsiveStyle = actualSize === 24 ? _defineProperty({}, MEDIA_QUERIES.TABLET, {
    marginBottom: 0
  }) : undefined;
  return _objectSpread2(_objectSpread2({}, marginStyle), marginResponsiveStyle);
}, {
  display: 'block',
  color: SECONDARY_TEXT_COLOUR
}, spacing.withWhiteSpace());
Caption.defaultProps = {
  size: 'XL'
};
Caption.displayName = 'Caption';

export { Caption, Caption as default };
