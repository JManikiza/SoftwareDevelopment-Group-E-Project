'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var styled = require('styled-components');
var reactTransitionGroup = require('react-transition-group');
var hexRgb = require('hex-rgb');
var icons = require('@govuk-react/icons');
var govukColours = require('govuk-colours');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);
var styled__default = /*#__PURE__*/_interopDefault(styled);
var hexRgb__default = /*#__PURE__*/_interopDefault(hexRgb);

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var _excluded = ["children", "backgroundColor", "backgroundColorOpacity", "title", "loading", "spinnerColor", "timeIn", "timeOut"];
var spinnerClassName = 'icon-loading';
var StyledContainer = styled__default["default"]('div').withConfig({
  displayName: "src__StyledContainer",
  componentId: "sc-gm1edz-0"
})({
  position: 'relative',
  paddingBottom: '2px',
  minHeight: '10px'
});
var Innerwrap = styled__default["default"]('div').withConfig({
  displayName: "src__Innerwrap",
  componentId: "sc-gm1edz-1"
})(function (_ref) {
  var _ref2;

  var timeIn = _ref.timeIn,
      timeOut = _ref.timeOut,
      backgroundColor = _ref.backgroundColor,
      backgroundColorOpacity = _ref.backgroundColorOpacity;
  return _ref2 = {
    position: 'absolute',
    height: '100%',
    top: 0,
    right: 0,
    left: 0,
    bottom: 0,
    display: 'flex',
    justifyContent: 'center'
  }, _defineProperty(_ref2, "& .".concat(spinnerClassName), {
    position: 'absolute',
    zIndex: 101,
    opacity: 1,
    display: 'block',
    height: '100%',
    maxHeight: 'calc(50vh + 100px)',
    transition: "opacity ".concat(timeIn, "ms ease-in-out"),
    willChange: 'opacity'
  }), _defineProperty(_ref2, '& .overlay', {
    zIndex: 100,
    transition: "background-color ".concat(timeIn, "ms ease-in-out"),
    willChange: 'background-color',
    backgroundColor: "rgba(\n      ".concat(hexRgb__default["default"](backgroundColor).red, ",\n      ").concat(hexRgb__default["default"](backgroundColor).blue, ",\n      ").concat(hexRgb__default["default"](backgroundColor).green, ",\n      ").concat(backgroundColorOpacity, ")")
  }), _defineProperty(_ref2, '&.fade-enter', _defineProperty({
    '& .overlay': {
      backgroundColor: "rgba(\n        ".concat(hexRgb__default["default"](backgroundColor).red, ",\n        ").concat(hexRgb__default["default"](backgroundColor).blue, ",\n        ").concat(hexRgb__default["default"](backgroundColor).green, ",\n        0)"),
      transitionDuration: "".concat(timeIn, "ms")
    }
  }, "& .".concat(spinnerClassName), {
    opacity: 0,
    transitionDuration: "".concat(timeIn, "ms"),
    transitionDelay: "".concat(timeIn / 2, "ms")
  })), _defineProperty(_ref2, '&.fade-enter-active', _defineProperty({
    '& .overlay': {
      backgroundColor: "rgba(\n        ".concat(hexRgb__default["default"](backgroundColor).red, ",\n        ").concat(hexRgb__default["default"](backgroundColor).blue, ",\n        ").concat(hexRgb__default["default"](backgroundColor).green, ",\n        ").concat(backgroundColorOpacity, ")"),
      transitionDuration: "".concat(timeIn, "ms")
    }
  }, "& .".concat(spinnerClassName), {
    opacity: 1,
    transitionDuration: "".concat(timeIn, "ms"),
    transitionDelay: "".concat(timeIn / 2, "ms")
  })), _defineProperty(_ref2, '&.fade-exit', _defineProperty({
    '& .overlay': {
      backgroundColor: "rgba(\n        ".concat(hexRgb__default["default"](backgroundColor).red, ",\n        ").concat(hexRgb__default["default"](backgroundColor).blue, ",\n        ").concat(hexRgb__default["default"](backgroundColor).green, ",\n        ").concat(backgroundColorOpacity, ")"),
      transitionDuration: "".concat(timeOut, "ms")
    }
  }, "& .".concat(spinnerClassName), {
    opacity: 1,
    transitionDuration: "".concat(timeOut, "ms")
  })), _defineProperty(_ref2, '&.fade-exit-active', _defineProperty({
    '& .overlay': {
      backgroundColor: "rgba(\n        ".concat(hexRgb__default["default"](backgroundColor).red, ",\n        ").concat(hexRgb__default["default"](backgroundColor).blue, ",\n        ").concat(hexRgb__default["default"](backgroundColor).green, ",\n        0)"),
      transitionDuration: "".concat(timeOut, "ms")
    }
  }, "& .".concat(spinnerClassName), {
    opacity: 0,
    transitionDuration: "".concat(timeOut, "ms")
  })), _ref2;
});
var Overlay = styled__default["default"]('div').withConfig({
  displayName: "src__Overlay",
  componentId: "sc-gm1edz-2"
})({
  position: 'absolute',
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  overflow: 'hidden',
  height: '100%',
  width: '100%'
});
/**
 * Use a LoadingBox to wrap components that can asyncronously load content.
 *
 * When `loading` is set to `true`, a spinner will overlay the contents to give visual feedback to the user.
 *
 * - https://govuk-react.github.io/govuk-react/?path=/docs/loading-box
 */

var LoadingBox = function LoadingBox(_ref3) {
  var children = _ref3.children,
      backgroundColor = _ref3.backgroundColor,
      backgroundColorOpacity = _ref3.backgroundColorOpacity,
      title = _ref3.title,
      loading = _ref3.loading,
      spinnerColor = _ref3.spinnerColor,
      timeIn = _ref3.timeIn,
      timeOut = _ref3.timeOut,
      props = _objectWithoutProperties(_ref3, _excluded);

  var nodeRef = React__namespace.useRef(null);
  return /*#__PURE__*/React__namespace.createElement(StyledContainer, props, /*#__PURE__*/React__namespace.createElement(reactTransitionGroup.CSSTransition, {
    nodeRef: nodeRef,
    timeout: timeOut,
    classNames: "fade",
    "in": loading,
    unmountOnExit: true
  }, /*#__PURE__*/React__namespace.createElement(Innerwrap, {
    ref: nodeRef,
    backgroundColor: backgroundColor,
    backgroundColorOpacity: backgroundColorOpacity,
    timeIn: timeIn,
    timeOut: timeOut
  }, /*#__PURE__*/React__namespace.createElement(icons.Spinner, {
    title: title,
    className: spinnerClassName,
    fill: spinnerColor,
    width: "50px",
    height: "50px"
  }), /*#__PURE__*/React__namespace.createElement(Overlay, {
    className: "overlay"
  }))), children);
};
LoadingBox.defaultProps = {
  spinnerColor: govukColours.BLACK,
  backgroundColor: govukColours.WHITE,
  backgroundColorOpacity: 0.85,
  title: undefined,
  loading: false,
  timeIn: 800,
  timeOut: 200
};
LoadingBox.displayName = 'LoadingBox';

exports.LoadingBox = LoadingBox;
exports["default"] = LoadingBox;
